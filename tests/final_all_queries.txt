
==============================================================
          DB25 SQL Parser - Enhanced AST Viewer v2.0
==============================================================

Loaded 39 queries from tests/showcase_queries.sqls

=== Query #1 ===
SQL: SELECT * FROM users

Parse Statistics:
  Parse Time:          9 us
  Node Count:          5 nodes
  Tree Depth:          3 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=2}
  ├─SELECT LIST {id=3, flags=NONE, children=1}
  │   └─* {id=2, flags=NONE}
  └─FROM {id=5, flags=NONE, children=1}
      └─TABLE {val=users, id=4, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #2 ===
SQL: SELECT id, name, email FROM customers

Parse Statistics:
  Parse Time:          5 us
  Node Count:          7 nodes
  Tree Depth:          3 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=2}
  ├─SELECT LIST {id=3, flags=NONE, children=3}
  │   ├─COLUMN {val=id, id=2, flags=NONE}
  │   ├─COLUMN {val=name, id=4, flags=NONE}
  │   └─COLUMN {val=email, id=5, flags=NONE}
  └─FROM {id=7, flags=NONE, children=1}
      └─TABLE {val=customers, id=6, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #3 ===
SQL: SELECT * FROM products WHERE price > 100 AND stock > 0

Parse Statistics:
  Parse Time:          2 us
  Node Count:         13 nodes
  Tree Depth:          5 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=3}
  ├─SELECT LIST {id=3, flags=NONE, children=1}
  │   └─* {id=2, flags=NONE}
  ├─FROM {id=5, flags=NONE, children=1}
  │   └─TABLE {val=products, id=4, flags=NONE}
  └─WHERE {id=13, flags=NONE, children=1}
      └─BINARY {op=AND, id=12, flags=NONE, children=2}
          ├─BINARY {op=>, id=8, flags=NONE, children=2}
          │   ├─COLUMN {val=price, id=6, flags=NONE}
          │   └─INT {val=100, id=7, flags=NONE}
          └─BINARY {op=>, id=11, flags=NONE, children=2}
              ├─COLUMN {val=stock, id=9, flags=NONE}
              └─INT {val=0, id=10, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #4 ===
SQL: SELECT name, score FROM students ORDER BY score DESC LIMIT 10

Parse Statistics:
  Parse Time:          2 us
  Node Count:         10 nodes
  Tree Depth:          3 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=4}
  ├─SELECT LIST {id=3, flags=NONE, children=2}
  │   ├─COLUMN {val=name, id=2, flags=NONE}
  │   └─COLUMN {val=score, id=4, flags=NONE}
  ├─FROM {id=6, flags=NONE, children=1}
  │   └─TABLE {val=students, id=5, flags=NONE}
  ├─ORDER BY {id=8, flags=NONE, children=1}
  │   └─COLUMN {val=score, id=7, flags=NONE}
  └─LIMIT {id=9, flags=NONE, children=1}
      └─INT {val=10, id=10, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #5 ===
SQL: SELECT u.name, o.total  FROM users u  INNER JOIN orders o ON u.id = o.user_id

Parse Statistics:
  Parse Time:          4 us
  Node Count:         11 nodes
  Tree Depth:          5 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=2}
  ├─SELECT LIST {id=3, flags=NONE, children=2}
  │   ├─COLUMN {val=u.name, id=2, flags=NONE}
  │   └─COLUMN {val=o.total, id=4, flags=NONE}
  └─FROM {id=6, flags=NONE, children=2}
      ├─TABLE {val=users, alias=u, id=5, flags=NONE}
      └─JOIN {type=INNER JOIN, id=7, flags=NONE, children=2}
          ├─TABLE {val=orders, alias=o, id=8, flags=NONE}
          └─BINARY {op==, id=11, flags=NONE, children=2}
              ├─COLUMN {val=u.id, id=9, flags=NONE}
              └─COLUMN {val=o.user_id, id=10, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #6 ===
SQL: SELECT c.name, o.order_date, p.product_name, oi.quantity FROM customers c JOIN orders o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id WHERE o.order_date >= '2024-01-01'

Parse Statistics:
  Parse Time:          6 us
  Node Count:         27 nodes
  Tree Depth:          5 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=3}
  ├─SELECT LIST {id=3, flags=NONE, children=4}
  │   ├─COLUMN {val=c.name, id=2, flags=NONE}
  │   ├─COLUMN {val=o.order_date, id=4, flags=NONE}
  │   ├─COLUMN {val=p.product_name, id=5, flags=NONE}
  │   └─COLUMN {val=oi.quantity, id=6, flags=NONE}
  ├─FROM {id=8, flags=NONE, children=4}
  │   ├─TABLE {val=customers, alias=c, id=7, flags=NONE}
  │   ├─JOIN {type=JOIN, id=9, flags=NONE, children=2}
  │   │   ├─TABLE {val=orders, alias=o, id=10, flags=NONE}
  │   │   └─BINARY {op==, id=13, flags=NONE, children=2}
  │   │       ├─COLUMN {val=c.id, id=11, flags=NONE}
  │   │       └─COLUMN {val=o.customer_id, id=12, flags=NONE}
  │   ├─JOIN {type=JOIN, id=14, flags=NONE, children=2}
  │   │   ├─TABLE {val=order_items, alias=oi, id=15, flags=NONE}
  │   │   └─BINARY {op==, id=18, flags=NONE, children=2}
  │   │       ├─COLUMN {val=o.id, id=16, flags=NONE}
  │   │       └─COLUMN {val=oi.order_id, id=17, flags=NONE}
  │   └─JOIN {type=JOIN, id=19, flags=NONE, children=2}
  │       ├─TABLE {val=products, alias=p, id=20, flags=NONE}
  │       └─BINARY {op==, id=23, flags=NONE, children=2}
  │           ├─COLUMN {val=oi.product_id, id=21, flags=NONE}
  │           └─COLUMN {val=p.id, id=22, flags=NONE}
  └─WHERE {id=27, flags=NONE, children=1}
      └─BINARY {op=>=, id=26, flags=NONE, children=2}
          ├─COLUMN {val=o.order_date, id=24, flags=NONE}
          └─STRING {''2024-01-01'', id=25, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #7 ===
SQL: SELECT d.name, COUNT(e.id) as emp_count FROM departments d LEFT JOIN employees e ON d.id = e.dept_id GROUP BY d.id, d.name HAVING COUNT(e.id) > 5

Parse Statistics:
  Parse Time:          5 us
  Node Count:         20 nodes
  Tree Depth:          5 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=4}
  ├─SELECT LIST {id=3, flags=NONE, children=2}
  │   ├─COLUMN {val=d.name, id=2, flags=NONE}
  │   └─FUNCTION {val=COUNT, alias=emp_count, id=4, flags=NONE, children=1}
  │       └─COLUMN {val=e.id, id=5, flags=NONE}
  ├─FROM {id=7, flags=NONE, children=2}
  │   ├─TABLE {val=departments, alias=d, id=6, flags=NONE}
  │   └─JOIN {type=LEFT JOIN, id=8, flags=NONE, children=2}
  │       ├─TABLE {val=employees, alias=e, id=9, flags=NONE}
  │       └─BINARY {op==, id=12, flags=NONE, children=2}
  │           ├─COLUMN {val=d.id, id=10, flags=NONE}
  │           └─COLUMN {val=e.dept_id, id=11, flags=NONE}
  ├─GROUP BY {id=13, flags=NONE, children=2}
  │   ├─COLUMN {val=d.id, id=14, flags=NONE}
  │   └─COLUMN {val=d.name, id=15, flags=NONE}
  └─HAVING {id=20, flags=NONE, children=1}
      └─BINARY {op=>, id=19, flags=NONE, children=2}
          ├─FUNCTION {val=COUNT, id=16, flags=NONE, children=1}
          │   └─COLUMN {val=e.id, id=17, flags=NONE}
          └─INT {val=5, id=18, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #8 ===
SQL: SELECT COUNT(*) as total, AVG(price) as avg_price FROM products

Parse Statistics:
  Parse Time:          3 us
  Node Count:          8 nodes
  Tree Depth:          4 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=2}
  ├─SELECT LIST {id=4, flags=NONE, children=2}
  │   ├─FUNCTION {val=COUNT, alias=total, id=2, flags=NONE, children=1}
  │   │   └─* {id=3, flags=NONE}
  │   └─FUNCTION {val=AVG, alias=avg_price, id=5, flags=NONE, children=1}
  │       └─IDENTIFIER {val=price, id=6, flags=NONE}
  └─FROM {id=8, flags=NONE, children=1}
      └─TABLE {val=products, id=7, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #9 ===
SQL: SELECT category, COUNT(*) as count, MAX(price) as max_price FROM products GROUP BY category HAVING COUNT(*) > 10

Parse Statistics:
  Parse Time:          3 us
  Node Count:         16 nodes
  Tree Depth:          5 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=4}
  ├─SELECT LIST {id=3, flags=NONE, children=3}
  │   ├─COLUMN {val=category, id=2, flags=NONE}
  │   ├─FUNCTION {val=COUNT, alias=count, id=4, flags=NONE, children=1}
  │   │   └─* {id=5, flags=NONE}
  │   └─FUNCTION {val=MAX, alias=max_price, id=6, flags=NONE, children=1}
  │       └─IDENTIFIER {val=price, id=7, flags=NONE}
  ├─FROM {id=9, flags=NONE, children=1}
  │   └─TABLE {val=products, id=8, flags=NONE}
  ├─GROUP BY {id=10, flags=NONE, children=1}
  │   └─COLUMN {val=category, id=11, flags=NONE}
  └─HAVING {id=16, flags=NONE, children=1}
      └─BINARY {op=>, id=15, flags=NONE, children=2}
          ├─FUNCTION {val=COUNT, id=12, flags=NONE, children=1}
          │   └─* {id=13, flags=NONE}
          └─INT {val=10, id=14, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #10 ===
SQL: SELECT dept, job_title, COUNT(*) as count FROM employees GROUP BY GROUPING SETS ((dept), (job_title), (dept, job_title), ())

Parse Statistics:
  Parse Time:          3 us
  Node Count:         18 nodes
  Tree Depth:          5 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=3}
  ├─SELECT LIST {id=3, flags=NONE, children=3}
  │   ├─COLUMN {val=dept, id=2, flags=NONE}
  │   ├─COLUMN {val=job_title, id=4, flags=NONE}
  │   └─FUNCTION {val=COUNT, alias=count, id=5, flags=NONE, children=1}
  │       └─* {id=6, flags=NONE}
  ├─FROM {id=8, flags=NONE, children=1}
  │   └─TABLE {val=employees, id=7, flags=NONE}
  └─GROUP BY {id=9, flags=NONE, children=1}
      └─NODE_70 {val=GROUPING_SETS, id=10, flags=NONE, children=4}
          ├─NODE_96 {id=11, flags=NONE, children=1}
          │   └─COLUMN {val=dept, id=12, flags=NONE}
          ├─NODE_96 {id=13, flags=NONE, children=1}
          │   └─COLUMN {val=job_title, id=14, flags=NONE}
          ├─NODE_96 {id=15, flags=NONE, children=2}
          │   ├─COLUMN {val=dept, id=16, flags=NONE}
          │   └─COLUMN {val=job_title, id=17, flags=NONE}
          └─NODE_96 {id=18, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #11 ===
SQL: SELECT      name,     department,     salary,     RANK() OVER (PARTITION BY department ORDER BY salary DESC) as dept_rank FROM employees

Parse Statistics:
  Parse Time:          3 us
  Node Count:         13 nodes
  Tree Depth:          6 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=2}
  ├─SELECT LIST {id=3, flags=NONE, children=4}
  │   ├─COLUMN {val=name, id=2, flags=NONE}
  │   ├─COLUMN {val=department, id=4, flags=NONE}
  │   ├─COLUMN {val=salary, id=5, flags=NONE}
  │   └─FUNCTION {val=RANK, alias=dept_rank, id=6, flags=NONE, children=1}
  │       └─WINDOW {id=7, flags=NONE, children=2}
  │           ├─NODE_100 {id=8, flags=NONE, children=1}
  │           │   └─COLUMN {val=department, id=9, flags=NONE}
  │           └─ORDER BY {id=11, flags=NONE, children=1}
  │               └─COLUMN {val=salary, id=10, flags=NONE}
  └─FROM {id=13, flags=NONE, children=1}
      └─TABLE {val=employees, id=12, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #12 ===
SQL: SELECT      order_date,     amount,     SUM(amount) OVER (ORDER BY order_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as running_total FROM orders

Parse Statistics:
  Parse Time:          3 us
  Node Count:         14 nodes
  Tree Depth:          6 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=2}
  ├─SELECT LIST {id=3, flags=NONE, children=3}
  │   ├─COLUMN {val=order_date, id=2, flags=NONE}
  │   ├─COLUMN {val=amount, id=4, flags=NONE}
  │   └─FUNCTION {val=SUM, alias=running_total, id=5, flags=NONE, children=2}
  │       ├─IDENTIFIER {val=amount, id=6, flags=NONE}
  │       └─WINDOW {id=7, flags=NONE, children=2}
  │           ├─ORDER BY {id=9, flags=NONE, children=1}
  │           │   └─COLUMN {val=order_date, id=8, flags=NONE}
  │           └─NODE_102 {val=ROWS, id=10, flags=NONE, children=2}
  │               ├─NODE_103 {val=UNBOUNDED, schema=PRECEDING, id=11, flags=NONE}
  │               └─NODE_103 {val=CURRENT ROW, id=12, flags=NONE}
  └─FROM {id=14, flags=NONE, children=1}
      └─TABLE {val=orders, id=13, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #13 ===
SQL: SELECT      name,     score,     RANK() OVER (ORDER BY score DESC) as rank,     DENSE_RANK() OVER (ORDER BY score DESC) as dense_rank,     NTILE(4) OVER (ORDER BY score DESC) as quartile FROM students

Parse Statistics:
  Parse Time:          4 us
  Node Count:         19 nodes
  Tree Depth:          6 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=2}
  ├─SELECT LIST {id=3, flags=NONE, children=5}
  │   ├─COLUMN {val=name, id=2, flags=NONE}
  │   ├─COLUMN {val=score, id=4, flags=NONE}
  │   ├─FUNCTION {val=RANK, alias=rank, id=5, flags=NONE, children=1}
  │   │   └─WINDOW {id=6, flags=NONE, children=1}
  │   │       └─ORDER BY {id=8, flags=NONE, children=1}
  │   │           └─COLUMN {val=score, id=7, flags=NONE}
  │   ├─FUNCTION {val=DENSE_RANK, alias=dense_rank, id=9, flags=NONE, children=1}
  │   │   └─WINDOW {id=10, flags=NONE, children=1}
  │   │       └─ORDER BY {id=12, flags=NONE, children=1}
  │   │           └─COLUMN {val=score, id=11, flags=NONE}
  │   └─FUNCTION {val=NTILE, alias=quartile, id=13, flags=NONE, children=2}
  │       ├─INT {val=4, id=14, flags=NONE}
  │       └─WINDOW {id=15, flags=NONE, children=1}
  │           └─ORDER BY {id=17, flags=NONE, children=1}
  │               └─COLUMN {val=score, id=16, flags=NONE}
  └─FROM {id=19, flags=NONE, children=1}
      └─TABLE {val=students, id=18, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #14 ===
SQL: WITH high_value_customers AS (     SELECT customer_id, SUM(total) as total_spent     FROM orders     GROUP BY customer_id     HAVING SUM(total) > 10000 ) SELECT c.name, h.total_spent FROM customers c JOIN high_value_customers h ON c.id = h.customer_id

Parse Statistics:
  Parse Time:          4 us
  Node Count:         27 nodes
  Tree Depth:          8 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=17, flags=NONE, children=3}
  ├─NODE_94 {id=1, flags=NONE, children=1}
  │   └─CTE {val=high_value_customers, id=2, flags=NONE, children=1}
  │       └─SELECT {id=3, flags=NONE, children=4}
  │           ├─SELECT LIST {id=5, flags=NONE, children=2}
  │           │   ├─COLUMN {val=customer_id, id=4, flags=NONE}
  │           │   └─FUNCTION {val=SUM, alias=total_spent, id=6, flags=NONE, children=1}
  │           │       └─IDENTIFIER {val=total, id=7, flags=NONE}
  │           ├─FROM {id=9, flags=NONE, children=1}
  │           │   └─TABLE {val=orders, id=8, flags=NONE}
  │           ├─GROUP BY {id=10, flags=NONE, children=1}
  │           │   └─COLUMN {val=customer_id, id=11, flags=NONE}
  │           └─HAVING {id=16, flags=NONE, children=1}
  │               └─BINARY {op=>, id=15, flags=NONE, children=2}
  │                   ├─FUNCTION {val=SUM, id=12, flags=NONE, children=1}
  │                   │   └─IDENTIFIER {val=total, id=13, flags=NONE}
  │                   └─INT {val=10000, id=14, flags=NONE}
  ├─SELECT LIST {id=19, flags=NONE, children=2}
  │   ├─COLUMN {val=c.name, id=18, flags=NONE}
  │   └─COLUMN {val=h.total_spent, id=20, flags=NONE}
  └─FROM {id=22, flags=NONE, children=2}
      ├─TABLE {val=customers, alias=c, id=21, flags=NONE}
      └─JOIN {type=JOIN, id=23, flags=NONE, children=2}
          ├─TABLE {val=high_value_customers, alias=h, id=24, flags=NONE}
          └─BINARY {op==, id=27, flags=NONE, children=2}
              ├─COLUMN {val=c.id, id=25, flags=NONE}
              └─COLUMN {val=h.customer_id, id=26, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #15 ===
SQL: WITH RECURSIVE employee_hierarchy AS (     SELECT id, name, manager_id, 0 as level     FROM employees     WHERE manager_id IS NULL     UNION ALL     SELECT e.id, e.name, e.manager_id, h.level + 1     FROM employees e     JOIN employee_hierarchy h ON e.manager_id = h.id ) SELECT * FROM employee_hierarchy ORDER BY level, name

Parse Statistics:
  Parse Time:          6 us
  Node Count:         37 nodes
  Tree Depth:          9 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=30, flags=NONE, children=4}
  ├─NODE_94 {id=1, flags=NONE, children=1}
  │   └─CTE {val=employee_hierarchy, id=2, flags=NONE, children=1}
  │       └─UNION {val=UNION, id=14, flags=ALL, children=2}
  │           ├─SELECT {id=3, flags=NONE, children=3}
  │           │   ├─SELECT LIST {id=5, flags=NONE, children=4}
  │           │   │   ├─COLUMN {val=id, id=4, flags=NONE}
  │           │   │   ├─COLUMN {val=name, id=6, flags=NONE}
  │           │   │   ├─COLUMN {val=manager_id, id=7, flags=NONE}
  │           │   │   └─INT {val=0, alias=level, id=8, flags=NONE}
  │           │   ├─FROM {id=10, flags=NONE, children=1}
  │           │   │   └─TABLE {val=employees, id=9, flags=NONE}
  │           │   └─WHERE {id=13, flags=NONE, children=1}
  │           │       └─IS NULL {val=IS NULL, id=12, flags=NONE, children=1}
  │           │           └─COLUMN {val=manager_id, id=11, flags=NONE}
  │           └─SELECT {id=15, flags=NONE, children=2}
  │               ├─SELECT LIST {id=17, flags=NONE, children=4}
  │               │   ├─COLUMN {val=e.id, id=16, flags=NONE}
  │               │   ├─COLUMN {val=e.name, id=18, flags=NONE}
  │               │   ├─COLUMN {val=e.manager_id, id=19, flags=NONE}
  │               │   └─BINARY {op=+, id=22, flags=NONE, children=2}
  │               │       ├─COLUMN {val=h.level, id=20, flags=NONE}
  │               │       └─INT {val=1, id=21, flags=NONE}
  │               └─FROM {id=24, flags=NONE, children=2}
  │                   ├─TABLE {val=employees, alias=e, id=23, flags=NONE}
  │                   └─JOIN {type=JOIN, id=25, flags=NONE, children=2}
  │                       ├─TABLE {val=employee_hierarchy, alias=h, id=26, flags=NONE}
  │                       └─BINARY {op==, id=29, flags=NONE, children=2}
  │                           ├─COLUMN {val=e.manager_id, id=27, flags=NONE}
  │                           └─COLUMN {val=h.id, id=28, flags=NONE}
  ├─SELECT LIST {id=32, flags=NONE, children=1}
  │   └─* {id=31, flags=NONE}
  ├─FROM {id=34, flags=NONE, children=1}
  │   └─TABLE {val=employee_hierarchy, id=33, flags=NONE}
  └─ORDER BY {id=36, flags=NONE, children=2}
      ├─COLUMN {val=level, id=35, flags=NONE}
      └─COLUMN {val=name, id=37, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #16 ===
SQL: WITH  sales_by_month AS (     SELECT          DATE_TRUNC('month', order_date) as month,         SUM(total) as monthly_total     FROM orders     GROUP BY DATE_TRUNC('month', order_date) ), avg_sales AS (     SELECT AVG(monthly_total) as avg_monthly     FROM sales_by_month ) SELECT      s.month,     s.monthly_total,     a.avg_monthly,     s.monthly_total - a.avg_monthly as variance FROM sales_by_month s CROSS JOIN avg_sales a

Parse Statistics:
  Parse Time:          6 us
  Node Count:         34 nodes
  Tree Depth:          7 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=23, flags=NONE, children=3}
  ├─NODE_94 {id=1, flags=NONE, children=2}
  │   ├─CTE {val=sales_by_month, id=2, flags=NONE, children=1}
  │   │   └─SELECT {id=3, flags=NONE, children=3}
  │   │       ├─SELECT LIST {id=7, flags=NONE, children=2}
  │   │       │   ├─FUNCTION {val=DATE_TRUNC, alias=month, id=4, flags=NONE, children=2}
  │   │       │   │   ├─STRING {''month'', id=5, flags=NONE}
  │   │       │   │   └─IDENTIFIER {val=order_date, id=6, flags=NONE}
  │   │       │   └─FUNCTION {val=SUM, alias=monthly_total, id=8, flags=NONE, children=1}
  │   │       │       └─IDENTIFIER {val=total, id=9, flags=NONE}
  │   │       ├─FROM {id=11, flags=NONE, children=1}
  │   │       │   └─TABLE {val=orders, id=10, flags=NONE}
  │   │       └─GROUP BY {id=12, flags=NONE, children=1}
  │   │           └─FUNCTION {val=DATE_TRUNC, id=13, flags=NONE, children=2}
  │   │               ├─STRING {''month'', id=14, flags=NONE}
  │   │               └─IDENTIFIER {val=order_date, id=15, flags=NONE}
  │   └─CTE {val=avg_sales, id=16, flags=NONE, children=1}
  │       └─SELECT {id=17, flags=NONE, children=2}
  │           ├─SELECT LIST {id=20, flags=NONE, children=1}
  │           │   └─FUNCTION {val=AVG, alias=avg_monthly, id=18, flags=NONE, children=1}
  │           │       └─IDENTIFIER {val=monthly_total, id=19, flags=NONE}
  │           └─FROM {id=22, flags=NONE, children=1}
  │               └─TABLE {val=sales_by_month, id=21, flags=NONE}
  ├─SELECT LIST {id=25, flags=NONE, children=4}
  │   ├─COLUMN {val=s.month, id=24, flags=NONE}
  │   ├─COLUMN {val=s.monthly_total, id=26, flags=NONE}
  │   ├─COLUMN {val=a.avg_monthly, id=27, flags=NONE}
  │   └─BINARY {op=-, alias=variance, id=30, flags=NONE, children=2}
  │       ├─COLUMN {val=s.monthly_total, id=28, flags=NONE}
  │       └─COLUMN {val=a.avg_monthly, id=29, flags=NONE}
  └─FROM {id=32, flags=NONE, children=2}
      ├─TABLE {val=sales_by_month, alias=s, id=31, flags=NONE}
      └─JOIN {type=CROSS JOIN, id=33, flags=NONE, children=1}
          └─TABLE {val=avg_sales, alias=a, id=34, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #17 ===
SQL: SELECT      name,     salary,     (SELECT AVG(salary) FROM employees) as avg_salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees)

Parse Statistics:
  Parse Time:          3 us
  Node Count:         23 nodes
  Tree Depth:          8 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=3}
  ├─SELECT LIST {id=3, flags=NONE, children=3}
  │   ├─COLUMN {val=name, id=2, flags=NONE}
  │   ├─COLUMN {val=salary, id=4, flags=NONE}
  │   └─NODE_93 {alias=avg_salary, id=5, flags=NONE, children=1}
  │       └─SELECT {id=6, flags=NONE, children=2}
  │           ├─SELECT LIST {id=9, flags=NONE, children=1}
  │           │   └─FUNCTION {val=AVG, id=7, flags=NONE, children=1}
  │           │       └─IDENTIFIER {val=salary, id=8, flags=NONE}
  │           └─FROM {id=11, flags=NONE, children=1}
  │               └─TABLE {val=employees, id=10, flags=NONE}
  ├─FROM {id=13, flags=NONE, children=1}
  │   └─TABLE {val=employees, id=12, flags=NONE}
  └─WHERE {id=23, flags=NONE, children=1}
      └─BINARY {op=>, id=22, flags=NONE, children=2}
          ├─COLUMN {val=salary, id=14, flags=NONE}
          └─NODE_93 {id=15, flags=NONE, children=1}
              └─SELECT {id=16, flags=NONE, children=2}
                  ├─SELECT LIST {id=19, flags=NONE, children=1}
                  │   └─FUNCTION {val=AVG, id=17, flags=NONE, children=1}
                  │       └─IDENTIFIER {val=salary, id=18, flags=NONE}
                  └─FROM {id=21, flags=NONE, children=1}
                      └─TABLE {val=employees, id=20, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #18 ===
SQL: SELECT * FROM products WHERE category_id IN (     SELECT id FROM categories WHERE name LIKE '%Electronics%' )

Parse Statistics:
  Parse Time:          2 us
  Node Count:         18 nodes
  Tree Depth:          8 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=3}
  ├─SELECT LIST {id=3, flags=NONE, children=1}
  │   └─* {id=2, flags=NONE}
  ├─FROM {id=5, flags=NONE, children=1}
  │   └─TABLE {val=products, id=4, flags=NONE}
  └─WHERE {id=18, flags=NONE, children=1}
      └─IN {val=IN, id=17, flags=NONE, children=2}
          ├─COLUMN {val=category_id, id=6, flags=NONE}
          └─NODE_93 {id=7, flags=NONE, children=1}
              └─SELECT {id=8, flags=NONE, children=3}
                  ├─SELECT LIST {id=10, flags=NONE, children=1}
                  │   └─COLUMN {val=id, id=9, flags=NONE}
                  ├─FROM {id=12, flags=NONE, children=1}
                  │   └─TABLE {val=categories, id=11, flags=NONE}
                  └─WHERE {id=16, flags=NONE, children=1}
                      └─LIKE {val=LIKE, id=15, flags=NONE, children=2}
                          ├─COLUMN {val=name, id=13, flags=NONE}
                          └─STRING {''%Electronics%'', id=14, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #19 ===
SQL: SELECT c.* FROM customers c WHERE EXISTS (     SELECT 1 FROM orders o     WHERE o.customer_id = c.id     AND o.order_date >= CURRENT_DATE - INTERVAL '30 days' )

Parse Statistics:
  Parse Time:          2 us
  Node Count:          5 nodes
  Tree Depth:          4 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=1}
  └─SELECT LIST {id=5, flags=NONE, children=1}
      └─BINARY {op=*, alias=customers, id=4, flags=NONE, children=2}
          ├─COLUMN {val=c, id=2, flags=NONE}
          └─COLUMN {val=FROM, id=3, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #20 ===
SQL: SELECT      e1.name,     e1.salary,     (SELECT COUNT(*) FROM employees e2       WHERE e2.department = e1.department       AND e2.salary > e1.salary) as higher_paid_in_dept FROM employees e1

Parse Statistics:
  Parse Time:          4 us
  Node Count:         21 nodes
  Tree Depth:          8 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=2}
  ├─SELECT LIST {id=3, flags=NONE, children=3}
  │   ├─COLUMN {val=e1.name, id=2, flags=NONE}
  │   ├─COLUMN {val=e1.salary, id=4, flags=NONE}
  │   └─NODE_93 {alias=higher_paid_in_dept, id=5, flags=NONE, children=1}
  │       └─SELECT {id=6, flags=NONE, children=3}
  │           ├─SELECT LIST {id=9, flags=NONE, children=1}
  │           │   └─FUNCTION {val=COUNT, id=7, flags=NONE, children=1}
  │           │       └─* {id=8, flags=NONE}
  │           ├─FROM {id=11, flags=NONE, children=1}
  │           │   └─TABLE {val=employees, alias=e2, id=10, flags=NONE}
  │           └─WHERE {id=19, flags=NONE, children=1}
  │               └─BINARY {op=AND, id=18, flags=NONE, children=2}
  │                   ├─BINARY {op==, id=14, flags=NONE, children=2}
  │                   │   ├─COLUMN {val=e2.department, id=12, flags=NONE}
  │                   │   └─COLUMN {val=e1.department, id=13, flags=NONE}
  │                   └─BINARY {op=>, id=17, flags=NONE, children=2}
  │                       ├─COLUMN {val=e2.salary, id=15, flags=NONE}
  │                       └─COLUMN {val=e1.salary, id=16, flags=NONE}
  └─FROM {id=21, flags=NONE, children=1}
      └─TABLE {val=employees, alias=e1, id=20, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #21 ===
SQL: SELECT      name,     CASE status         WHEN 'active' THEN 'Active User'         WHEN 'inactive' THEN 'Inactive User'         WHEN 'suspended' THEN 'Account Suspended'         ELSE 'Unknown Status'     END as status_label FROM users

Parse Statistics:
  Parse Time:          3 us
  Node Count:         17 nodes
  Tree Depth:          5 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=2}
  ├─SELECT LIST {id=3, flags=NONE, children=2}
  │   ├─COLUMN {val=name, id=2, flags=NONE}
  │   └─CASE {alias=status_label, id=4, flags=NONE, children=5}
  │       ├─IDENTIFIER {val=status, id=5, flags=NONE}
  │       ├─BINARY {op=WHEN, id=6, flags=NONE, children=2}
  │       │   ├─STRING {''active'', id=7, flags=NONE}
  │       │   └─STRING {''Active User'', id=8, flags=NONE}
  │       ├─BINARY {op=WHEN, id=9, flags=NONE, children=2}
  │       │   ├─STRING {''inactive'', id=10, flags=NONE}
  │       │   └─STRING {''Inactive User'', id=11, flags=NONE}
  │       ├─BINARY {op=WHEN, id=12, flags=NONE, children=2}
  │       │   ├─STRING {''suspended'', id=13, flags=NONE}
  │       │   └─STRING {''Account Suspended'', id=14, flags=NONE}
  │       └─STRING {''Unknown Status'', id=15, flags=NONE}
  └─FROM {id=17, flags=NONE, children=1}
      └─TABLE {val=users, id=16, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #22 ===
SQL: SELECT      product_name,     price,     CASE          WHEN price < 10 THEN 'Budget'         WHEN price BETWEEN 10 AND 50 THEN 'Standard'         WHEN price BETWEEN 50 AND 100 THEN 'Premium'         WHEN price > 100 THEN 'Luxury'         ELSE 'Unpriced'     END as price_category FROM products

Parse Statistics:
  Parse Time:          4 us
  Node Count:         30 nodes
  Tree Depth:          6 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=2}
  ├─SELECT LIST {id=3, flags=NONE, children=3}
  │   ├─COLUMN {val=product_name, id=2, flags=NONE}
  │   ├─COLUMN {val=price, id=4, flags=NONE}
  │   └─CASE {alias=price_category, id=5, flags=NONE, children=5}
  │       ├─BINARY {op=WHEN, id=6, flags=NONE, children=2}
  │       │   ├─BINARY {op=<, id=9, flags=NONE, children=2}
  │       │   │   ├─IDENTIFIER {val=price, id=7, flags=NONE}
  │       │   │   └─INT {val=10, id=8, flags=NONE}
  │       │   └─STRING {''Budget'', id=10, flags=NONE}
  │       ├─BINARY {op=WHEN, id=11, flags=NONE, children=2}
  │       │   ├─BETWEEN {val=BETWEEN, id=15, flags=NONE, children=3}
  │       │   │   ├─IDENTIFIER {val=price, id=12, flags=NONE}
  │       │   │   ├─INT {val=10, id=13, flags=NONE}
  │       │   │   └─INT {val=50, id=14, flags=NONE}
  │       │   └─STRING {''Standard'', id=16, flags=NONE}
  │       ├─BINARY {op=WHEN, id=17, flags=NONE, children=2}
  │       │   ├─BETWEEN {val=BETWEEN, id=21, flags=NONE, children=3}
  │       │   │   ├─IDENTIFIER {val=price, id=18, flags=NONE}
  │       │   │   ├─INT {val=50, id=19, flags=NONE}
  │       │   │   └─INT {val=100, id=20, flags=NONE}
  │       │   └─STRING {''Premium'', id=22, flags=NONE}
  │       ├─BINARY {op=WHEN, id=23, flags=NONE, children=2}
  │       │   ├─BINARY {op=>, id=26, flags=NONE, children=2}
  │       │   │   ├─IDENTIFIER {val=price, id=24, flags=NONE}
  │       │   │   └─INT {val=100, id=25, flags=NONE}
  │       │   └─STRING {''Luxury'', id=27, flags=NONE}
  │       └─STRING {''Unpriced'', id=28, flags=NONE}
  └─FROM {id=30, flags=NONE, children=1}
      └─TABLE {val=products, id=29, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #23 ===
SQL: INSERT INTO users (name, email, created_at)  VALUES ('John Doe', 'john@example.com', NOW())

Parse Statistics:
  Parse Time:          2 us
  Node Count:          2 nodes
  Tree Depth:          2 levels

Abstract Syntax Tree:
--------------------------------------------------
INSERT {id=1, flags=NONE, children=1}
  └─TABLE {val=users, id=2, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #24 ===
SQL: INSERT INTO archived_orders  SELECT * FROM orders  WHERE order_date < '2023-01-01'

Parse Statistics:
  Parse Time:          1 us
  Node Count:         11 nodes
  Tree Depth:          5 levels

Abstract Syntax Tree:
--------------------------------------------------
INSERT {id=1, flags=NONE, children=2}
  ├─TABLE {val=archived_orders, id=2, flags=NONE}
  └─SELECT {id=3, flags=NONE, children=3}
      ├─SELECT LIST {id=5, flags=NONE, children=1}
      │   └─* {id=4, flags=NONE}
      ├─FROM {id=7, flags=NONE, children=1}
      │   └─TABLE {val=orders, id=6, flags=NONE}
      └─WHERE {id=11, flags=NONE, children=1}
          └─BINARY {op=<, id=10, flags=NONE, children=2}
              ├─COLUMN {val=order_date, id=8, flags=NONE}
              └─STRING {''2023-01-01'', id=9, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #25 ===
SQL: UPDATE products  SET price = price * 1.1,      updated_at = NOW()  WHERE category = 'Electronics' AND stock > 0

Parse Statistics:
  Parse Time:          2 us
  Node Count:         11 nodes
  Tree Depth:          5 levels

Abstract Syntax Tree:
--------------------------------------------------
UPDATE {id=1, flags=NONE, children=3}
  ├─TABLE {val=products, id=2, flags=NONE}
  ├─SET {id=3, flags=NONE, children=2}
  │   ├─BINARY {op=price, id=4, flags=NONE, children=1}
  │   │   └─BINARY {op=*, id=7, flags=NONE, children=2}
  │   │       ├─IDENTIFIER {val=price, id=5, flags=NONE}
  │   │       └─INT {val=1.1, id=6, flags=NONE}
  │   └─BINARY {op=updated_at, id=8, flags=NONE, children=1}
  │       └─FUNCTION {val=NOW, id=9, flags=NONE}
  └─WHERE {id=11, flags=NONE, children=1}
      └─COLUMN {val=WHERE, id=10, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #26 ===
SQL: DELETE FROM sessions  WHERE last_activity < CURRENT_TIMESTAMP - INTERVAL '24 hours'

Parse Statistics:
  Parse Time:          1 us
  Node Count:          4 nodes
  Tree Depth:          3 levels

Abstract Syntax Tree:
--------------------------------------------------
DELETE {id=1, flags=NONE, children=2}
  ├─TABLE {val=sessions, id=2, flags=NONE}
  └─WHERE {id=4, flags=NONE, children=1}
      └─COLUMN {val=WHERE, id=3, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #27 ===
SQL: CREATE TABLE customers (     id SERIAL PRIMARY KEY,     name VARCHAR(100) NOT NULL,     email VARCHAR(255) UNIQUE NOT NULL,     phone VARCHAR(20),     address TEXT,     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP )

Parse Statistics:
  Parse Time:          4 us
  Node Count:          1 nodes
  Tree Depth:          1 levels

Abstract Syntax Tree:
--------------------------------------------------
CREATE TABLE {val=customers, id=1, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #28 ===
SQL: CREATE TABLE orders (     id BIGSERIAL PRIMARY KEY,     customer_id INTEGER NOT NULL REFERENCES customers(id) ON DELETE CASCADE,     order_date DATE NOT NULL DEFAULT CURRENT_DATE,     total DECIMAL(10, 2) NOT NULL CHECK (total >= 0),     status VARCHAR(20) DEFAULT 'pending',     CONSTRAINT valid_status CHECK (status IN ('pending', 'processing', 'shipped', 'delivered', 'cancelled')) )

Parse Statistics:
  Parse Time:          5 us
  Node Count:          1 nodes
  Tree Depth:          1 levels

Abstract Syntax Tree:
--------------------------------------------------
CREATE TABLE {val=orders, id=1, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #29 ===
SQL: CREATE INDEX idx_orders_customer_date  ON orders(customer_id, order_date DESC)

Parse Statistics:
  Parse Time:          1 us
  Node Count:          1 nodes
  Tree Depth:          1 levels

Abstract Syntax Tree:
--------------------------------------------------
CREATE INDEX {val=idx_orders_customer_date, schema=orders, id=1, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #30 ===
SQL: CREATE VIEW active_customers AS SELECT c.*, COUNT(o.id) as order_count FROM customers c LEFT JOIN orders o ON c.id = o.customer_id WHERE c.created_at >= CURRENT_DATE - INTERVAL '1 year' GROUP BY c.id

Parse Statistics:
  Parse Time:          4 us
  Node Count:         19 nodes
  Tree Depth:          6 levels

Abstract Syntax Tree:
--------------------------------------------------
CREATE VIEW {val=active_customers, id=1, flags=NONE, children=1}
  └─SELECT {id=2, flags=NONE, children=3}
      ├─SELECT LIST {id=4, flags=NONE, children=2}
      │   ├─COLUMN {val=c, id=3, flags=NONE}
      │   └─FUNCTION {val=COUNT, alias=order_count, id=5, flags=NONE, children=1}
      │       └─COLUMN {val=o.id, id=6, flags=NONE}
      ├─FROM {id=8, flags=NONE, children=2}
      │   ├─TABLE {val=customers, alias=c, id=7, flags=NONE}
      │   └─JOIN {type=LEFT JOIN, id=9, flags=NONE, children=2}
      │       ├─TABLE {val=orders, alias=o, id=10, flags=NONE}
      │       └─BINARY {op==, id=13, flags=NONE, children=2}
      │           ├─COLUMN {val=c.id, id=11, flags=NONE}
      │           └─COLUMN {val=o.customer_id, id=12, flags=NONE}
      └─WHERE {id=19, flags=NONE, children=1}
          └─BINARY {op=>=, id=18, flags=NONE, children=2}
              ├─COLUMN {val=c.created_at, id=14, flags=NONE}
              └─BINARY {op=-, id=17, flags=NONE, children=2}
                  ├─COLUMN {val=CURRENT_DATE, id=15, flags=NONE}
                  └─COLUMN {val=INTERVAL, id=16, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #31 ===
SQL: ALTER TABLE products  ADD COLUMN discount_percentage DECIMAL(5, 2) DEFAULT 0 CHECK (discount_percentage >= 0 AND discount_percentage <= 100)

Parse Statistics:
  Parse Time:          3 us
  Node Count:         14 nodes
  Tree Depth:          7 levels

Abstract Syntax Tree:
--------------------------------------------------
ALTER TABLE {val=products, id=1, flags=NONE, children=1}
  └─NODE_43 {val=ADD, id=2, flags=NONE, children=1}
      └─COLUMN_DEF {val=discount_percentage, id=3, flags=NONE, children=3}
          ├─DATA_TYPE {val=DECIMAL, id=4, flags=NONE, dtype=6}
          ├─NODE_37 {id=5, flags=NONE, children=1}
          │   └─INT {val=0, id=6, flags=NONE}
          └─NODE_38 {id=7, flags=NONE, children=1}
              └─BINARY {op=AND, id=14, flags=NONE, children=2}
                  ├─BINARY {op=>=, id=10, flags=NONE, children=2}
                  │   ├─IDENTIFIER {val=discount_percentage, id=8, flags=NONE}
                  │   └─INT {val=0, id=9, flags=NONE}
                  └─BINARY {op=<=, id=13, flags=NONE, children=2}
                      ├─IDENTIFIER {val=discount_percentage, id=11, flags=NONE}
                      └─INT {val=100, id=12, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #32 ===
SQL: SELECT      UPPER(first_name) || ' ' || LOWER(last_name) as formatted_name,     SUBSTRING(email FROM 1 FOR POSITION('@' IN email) - 1) as username,     LENGTH(bio) as bio_length FROM users WHERE email LIKE '%@example.com'

[ERROR] Parse Error
  Line 1, Column 102: Unclosed parenthesis

------------------------------------------------------------

=== Query #33 ===
SQL: SELECT      DATE_TRUNC('month', created_at) as month,     EXTRACT(YEAR FROM created_at) as year,     AGE(NOW(), created_at) as account_age,     created_at + INTERVAL '30 days' as trial_end FROM users WHERE created_at >= '2024-01-01'::DATE

Parse Statistics:
  Parse Time:          4 us
  Node Count:         14 nodes
  Tree Depth:          4 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=1}
  └─SELECT LIST {id=5, flags=NONE, children=4}
      ├─FUNCTION {val=DATE_TRUNC, alias=month, id=2, flags=NONE, children=2}
      │   ├─STRING {''month'', id=3, flags=NONE}
      │   └─IDENTIFIER {val=created_at, id=4, flags=NONE}
      ├─FUNCTION {val=EXTRACT, alias=year, id=6, flags=NONE, children=2}
      │   ├─IDENTIFIER {val=YEAR, id=7, flags=NONE}
      │   └─COLUMN {val=created_at, id=8, flags=NONE}
      ├─FUNCTION {val=AGE, alias=account_age, id=9, flags=NONE, children=2}
      │   ├─FUNCTION {val=NOW, id=10, flags=NONE}
      │   └─IDENTIFIER {val=created_at, id=11, flags=NONE}
      └─BINARY {op=+, id=14, flags=NONE, children=2}
          ├─COLUMN {val=created_at, id=12, flags=NONE}
          └─COLUMN {val=INTERVAL, id=13, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #34 ===
SQL: SELECT      product_name,     price,     ROUND(price * 0.9, 2) as discounted_price,     CEIL(stock / 10.0) as boxes_needed,     FLOOR(LOG(price)) as price_magnitude FROM products WHERE MOD(id, 2) = 0

Parse Statistics:
  Parse Time:          4 us
  Node Count:         24 nodes
  Tree Depth:          5 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=1, flags=NONE, children=3}
  ├─SELECT LIST {id=3, flags=NONE, children=5}
  │   ├─COLUMN {val=product_name, id=2, flags=NONE}
  │   ├─COLUMN {val=price, id=4, flags=NONE}
  │   ├─FUNCTION {val=ROUND, alias=discounted_price, id=5, flags=NONE, children=2}
  │   │   ├─BINARY {op=*, id=8, flags=NONE, children=2}
  │   │   │   ├─IDENTIFIER {val=price, id=6, flags=NONE}
  │   │   │   └─INT {val=0.9, id=7, flags=NONE}
  │   │   └─INT {val=2, id=9, flags=NONE}
  │   ├─FUNCTION {val=CEIL, alias=boxes_needed, id=10, flags=NONE, children=1}
  │   │   └─BINARY {op=/, id=13, flags=NONE, children=2}
  │   │       ├─IDENTIFIER {val=stock, id=11, flags=NONE}
  │   │       └─INT {val=10.0, id=12, flags=NONE}
  │   └─FUNCTION {val=FLOOR, alias=price_magnitude, id=14, flags=NONE, children=1}
  │       └─FUNCTION {val=LOG, id=15, flags=NONE, children=1}
  │           └─IDENTIFIER {val=price, id=16, flags=NONE}
  ├─FROM {id=18, flags=NONE, children=1}
  │   └─TABLE {val=products, id=17, flags=NONE}
  └─WHERE {id=24, flags=NONE, children=1}
      └─BINARY {op==, id=23, flags=NONE, children=2}
          ├─FUNCTION {val=MOD, id=19, flags=NONE, children=2}
          │   ├─IDENTIFIER {val=id, id=20, flags=NONE}
          │   └─INT {val=2, id=21, flags=NONE}
          └─INT {val=0, id=22, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #35 ===
SQL: SELECT name, email FROM customers UNION SELECT name, email FROM suppliers

Parse Statistics:
  Parse Time:          2 us
  Node Count:         13 nodes
  Tree Depth:          4 levels

Abstract Syntax Tree:
--------------------------------------------------
UNION {val=UNION, id=7, flags=NONE, children=2}
  ├─SELECT {id=1, flags=NONE, children=2}
  │   ├─SELECT LIST {id=3, flags=NONE, children=2}
  │   │   ├─COLUMN {val=name, id=2, flags=NONE}
  │   │   └─COLUMN {val=email, id=4, flags=NONE}
  │   └─FROM {id=6, flags=NONE, children=1}
  │       └─TABLE {val=customers, id=5, flags=NONE}
  └─SELECT {id=8, flags=NONE, children=2}
      ├─SELECT LIST {id=10, flags=NONE, children=2}
      │   ├─COLUMN {val=name, id=9, flags=NONE}
      │   └─COLUMN {val=email, id=11, flags=NONE}
      └─FROM {id=13, flags=NONE, children=1}
          └─TABLE {val=suppliers, id=12, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #36 ===
SQL: SELECT product_id FROM orders_2023 INTERSECT SELECT product_id FROM orders_2024

Parse Statistics:
  Parse Time:          1 us
  Node Count:         11 nodes
  Tree Depth:          4 levels

Abstract Syntax Tree:
--------------------------------------------------
INTERSECT {val=INTERSECT, id=6, flags=NONE, children=2}
  ├─SELECT {id=1, flags=NONE, children=2}
  │   ├─SELECT LIST {id=3, flags=NONE, children=1}
  │   │   └─COLUMN {val=product_id, id=2, flags=NONE}
  │   └─FROM {id=5, flags=NONE, children=1}
  │       └─TABLE {val=orders_2023, id=4, flags=NONE}
  └─SELECT {id=7, flags=NONE, children=2}
      ├─SELECT LIST {id=9, flags=NONE, children=1}
      │   └─COLUMN {val=product_id, id=8, flags=NONE}
      └─FROM {id=11, flags=NONE, children=1}
          └─TABLE {val=orders_2024, id=10, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #37 ===
SQL: SELECT id FROM all_products EXCEPT SELECT product_id FROM discontinued_products

Parse Statistics:
  Parse Time:          1 us
  Node Count:         11 nodes
  Tree Depth:          4 levels

Abstract Syntax Tree:
--------------------------------------------------
EXCEPT {val=EXCEPT, id=6, flags=NONE, children=2}
  ├─SELECT {id=1, flags=NONE, children=2}
  │   ├─SELECT LIST {id=3, flags=NONE, children=1}
  │   │   └─COLUMN {val=id, id=2, flags=NONE}
  │   └─FROM {id=5, flags=NONE, children=1}
  │       └─TABLE {val=all_products, id=4, flags=NONE}
  └─SELECT {id=7, flags=NONE, children=2}
      ├─SELECT LIST {id=9, flags=NONE, children=1}
      │   └─COLUMN {val=product_id, id=8, flags=NONE}
      └─FROM {id=11, flags=NONE, children=1}
          └─TABLE {val=discontinued_products, id=10, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #38 ===
SQL: WITH monthly_sales AS (     SELECT          DATE_TRUNC('month', o.order_date) as month,         p.category,         SUM(oi.quantity * oi.unit_price) as revenue,         COUNT(DISTINCT o.id) as order_count,         COUNT(DISTINCT o.customer_id) as customer_count     FROM orders o     JOIN order_items oi ON o.id = oi.order_id     JOIN products p ON oi.product_id = p.id     WHERE o.order_date >= '2024-01-01'     GROUP BY DATE_TRUNC('month', o.order_date), p.category ) SELECT      month,     category,     revenue,     order_count,     customer_count,     revenue / NULLIF(order_count, 0) as avg_order_value,     LAG(revenue) OVER (PARTITION BY category ORDER BY month) as prev_month_revenue,     revenue - LAG(revenue) OVER (PARTITION BY category ORDER BY month) as month_over_month_change,     SUM(revenue) OVER (PARTITION BY category ORDER BY month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as cumulative_revenue FROM monthly_sales ORDER BY category, month

Parse Statistics:
  Parse Time:         18 us
  Node Count:         80 nodes
  Tree Depth:          8 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=38, flags=NONE, children=4}
  ├─NODE_94 {id=1, flags=NONE, children=1}
  │   └─CTE {val=monthly_sales, id=2, flags=NONE, children=1}
  │       └─SELECT {id=3, flags=NONE, children=4}
  │           ├─SELECT LIST {id=7, flags=NONE, children=5}
  │           │   ├─FUNCTION {val=DATE_TRUNC, alias=month, id=4, flags=NONE, children=2}
  │           │   │   ├─STRING {''month'', id=5, flags=NONE}
  │           │   │   └─COLUMN {val=o.order_date, id=6, flags=NONE}
  │           │   ├─COLUMN {val=p.category, id=8, flags=NONE}
  │           │   ├─FUNCTION {val=SUM, alias=revenue, id=9, flags=NONE, children=1}
  │           │   │   └─BINARY {op=*, id=12, flags=NONE, children=2}
  │           │   │       ├─COLUMN {val=oi.quantity, id=10, flags=NONE}
  │           │   │       └─COLUMN {val=oi.unit_price, id=11, flags=NONE}
  │           │   ├─FUNCTION {val=COUNT, alias=order_count, id=13, flags=DISTINCT, children=1}
  │           │   │   └─COLUMN {val=o.id, id=14, flags=NONE}
  │           │   └─FUNCTION {val=COUNT, alias=customer_count, id=15, flags=DISTINCT, children=1}
  │           │       └─COLUMN {val=o.customer_id, id=16, flags=NONE}
  │           ├─FROM {id=18, flags=NONE, children=3}
  │           │   ├─TABLE {val=orders, alias=o, id=17, flags=NONE}
  │           │   ├─JOIN {type=JOIN, id=19, flags=NONE, children=2}
  │           │   │   ├─TABLE {val=order_items, alias=oi, id=20, flags=NONE}
  │           │   │   └─BINARY {op==, id=23, flags=NONE, children=2}
  │           │   │       ├─COLUMN {val=o.id, id=21, flags=NONE}
  │           │   │       └─COLUMN {val=oi.order_id, id=22, flags=NONE}
  │           │   └─JOIN {type=JOIN, id=24, flags=NONE, children=2}
  │           │       ├─TABLE {val=products, alias=p, id=25, flags=NONE}
  │           │       └─BINARY {op==, id=28, flags=NONE, children=2}
  │           │           ├─COLUMN {val=oi.product_id, id=26, flags=NONE}
  │           │           └─COLUMN {val=p.id, id=27, flags=NONE}
  │           ├─WHERE {id=32, flags=NONE, children=1}
  │           │   └─BINARY {op=>=, id=31, flags=NONE, children=2}
  │           │       ├─COLUMN {val=o.order_date, id=29, flags=NONE}
  │           │       └─STRING {''2024-01-01'', id=30, flags=NONE}
  │           └─GROUP BY {id=33, flags=NONE, children=2}
  │               ├─FUNCTION {val=DATE_TRUNC, id=34, flags=NONE, children=2}
  │               │   ├─STRING {''month'', id=35, flags=NONE}
  │               │   └─COLUMN {val=o.order_date, id=36, flags=NONE}
  │               └─COLUMN {val=p.category, id=37, flags=NONE}
  ├─SELECT LIST {id=40, flags=NONE, children=9}
  │   ├─COLUMN {val=month, id=39, flags=NONE}
  │   ├─COLUMN {val=category, id=41, flags=NONE}
  │   ├─COLUMN {val=revenue, id=42, flags=NONE}
  │   ├─COLUMN {val=order_count, id=43, flags=NONE}
  │   ├─COLUMN {val=customer_count, id=44, flags=NONE}
  │   ├─BINARY {op=/, alias=avg_order_value, id=49, flags=NONE, children=2}
  │   │   ├─COLUMN {val=revenue, id=45, flags=NONE}
  │   │   └─FUNCTION {val=NULLIF, id=46, flags=NONE, children=2}
  │   │       ├─IDENTIFIER {val=order_count, id=47, flags=NONE}
  │   │       └─INT {val=0, id=48, flags=NONE}
  │   ├─FUNCTION {val=LAG, alias=prev_month_revenue, id=50, flags=NONE, children=2}
  │   │   ├─IDENTIFIER {val=revenue, id=51, flags=NONE}
  │   │   └─WINDOW {id=52, flags=NONE, children=2}
  │   │       ├─NODE_100 {id=53, flags=NONE, children=1}
  │   │       │   └─COLUMN {val=category, id=54, flags=NONE}
  │   │       └─ORDER BY {id=56, flags=NONE, children=1}
  │   │           └─COLUMN {val=month, id=55, flags=NONE}
  │   ├─BINARY {op=-, alias=month_over_month_change, id=65, flags=NONE, children=2}
  │   │   ├─COLUMN {val=revenue, id=57, flags=NONE}
  │   │   └─FUNCTION {val=LAG, id=58, flags=NONE, children=2}
  │   │       ├─IDENTIFIER {val=revenue, id=59, flags=NONE}
  │   │       └─WINDOW {id=60, flags=NONE, children=2}
  │   │           ├─NODE_100 {id=61, flags=NONE, children=1}
  │   │           │   └─COLUMN {val=category, id=62, flags=NONE}
  │   │           └─ORDER BY {id=64, flags=NONE, children=1}
  │   │               └─COLUMN {val=month, id=63, flags=NONE}
  │   └─FUNCTION {val=SUM, alias=cumulative_revenue, id=66, flags=NONE, children=2}
  │       ├─IDENTIFIER {val=revenue, id=67, flags=NONE}
  │       └─WINDOW {id=68, flags=NONE, children=3}
  │           ├─NODE_100 {id=69, flags=NONE, children=1}
  │           │   └─COLUMN {val=category, id=70, flags=NONE}
  │           ├─ORDER BY {id=72, flags=NONE, children=1}
  │           │   └─COLUMN {val=month, id=71, flags=NONE}
  │           └─NODE_102 {val=ROWS, id=73, flags=NONE, children=2}
  │               ├─NODE_103 {val=UNBOUNDED, schema=PRECEDING, id=74, flags=NONE}
  │               └─NODE_103 {val=CURRENT ROW, id=75, flags=NONE}
  ├─FROM {id=77, flags=NONE, children=1}
  │   └─TABLE {val=monthly_sales, id=76, flags=NONE}
  └─ORDER BY {id=79, flags=NONE, children=2}
      ├─COLUMN {val=category, id=78, flags=NONE}
      └─COLUMN {val=month, id=80, flags=NONE}
--------------------------------------------------

------------------------------------------------------------

=== Query #39 ===
SQL: WITH cohorts AS (     SELECT          customer_id,         DATE_TRUNC('month', MIN(order_date)) as cohort_month,         DATE_TRUNC('month', order_date) as order_month,         SUM(total) as monthly_revenue     FROM orders     GROUP BY customer_id, DATE_TRUNC('month', order_date) ), cohort_sizes AS (     SELECT          cohort_month,         COUNT(DISTINCT customer_id) as cohort_size     FROM cohorts     GROUP BY cohort_month ) SELECT      c.cohort_month,     c.order_month,     EXTRACT(MONTH FROM AGE(c.order_month, c.cohort_month)) as months_since_first_purchase,     cs.cohort_size,     COUNT(DISTINCT c.customer_id) as active_customers,     ROUND(100.0 * COUNT(DISTINCT c.customer_id) / cs.cohort_size, 2) as retention_rate,     SUM(c.monthly_revenue) as cohort_revenue FROM cohorts c JOIN cohort_sizes cs ON c.cohort_month = cs.cohort_month GROUP BY c.cohort_month, c.order_month, cs.cohort_size ORDER BY c.cohort_month, c.order_month ===

Parse Statistics:
  Parse Time:         10 us
  Node Count:         35 nodes
  Tree Depth:          8 levels

Abstract Syntax Tree:
--------------------------------------------------
SELECT {id=32, flags=NONE, children=2}
  ├─NODE_94 {id=1, flags=NONE, children=2}
  │   ├─CTE {val=cohorts, id=2, flags=NONE, children=1}
  │   │   └─SELECT {id=3, flags=NONE, children=3}
  │   │       ├─SELECT LIST {id=5, flags=NONE, children=4}
  │   │       │   ├─COLUMN {val=customer_id, id=4, flags=NONE}
  │   │       │   ├─FUNCTION {val=DATE_TRUNC, alias=cohort_month, id=6, flags=NONE, children=2}
  │   │       │   │   ├─STRING {''month'', id=7, flags=NONE}
  │   │       │   │   └─FUNCTION {val=MIN, id=8, flags=NONE, children=1}
  │   │       │   │       └─IDENTIFIER {val=order_date, id=9, flags=NONE}
  │   │       │   ├─FUNCTION {val=DATE_TRUNC, alias=order_month, id=10, flags=NONE, children=2}
  │   │       │   │   ├─STRING {''month'', id=11, flags=NONE}
  │   │       │   │   └─IDENTIFIER {val=order_date, id=12, flags=NONE}
  │   │       │   └─FUNCTION {val=SUM, alias=monthly_revenue, id=13, flags=NONE, children=1}
  │   │       │       └─IDENTIFIER {val=total, id=14, flags=NONE}
  │   │       ├─FROM {id=16, flags=NONE, children=1}
  │   │       │   └─TABLE {val=orders, id=15, flags=NONE}
  │   │       └─GROUP BY {id=17, flags=NONE, children=2}
  │   │           ├─COLUMN {val=customer_id, id=18, flags=NONE}
  │   │           └─FUNCTION {val=DATE_TRUNC, id=19, flags=NONE, children=2}
  │   │               ├─STRING {''month'', id=20, flags=NONE}
  │   │               └─IDENTIFIER {val=order_date, id=21, flags=NONE}
  │   └─CTE {val=cohort_sizes, id=22, flags=NONE, children=1}
  │       └─SELECT {id=23, flags=NONE, children=3}
  │           ├─SELECT LIST {id=25, flags=NONE, children=2}
  │           │   ├─COLUMN {val=cohort_month, id=24, flags=NONE}
  │           │   └─FUNCTION {val=COUNT, alias=cohort_size, id=26, flags=DISTINCT, children=1}
  │           │       └─IDENTIFIER {val=customer_id, id=27, flags=NONE}
  │           ├─FROM {id=29, flags=NONE, children=1}
  │           │   └─TABLE {val=cohorts, id=28, flags=NONE}
  │           └─GROUP BY {id=30, flags=NONE, children=1}
  │               └─COLUMN {val=cohort_month, id=31, flags=NONE}
  └─SELECT LIST {id=34, flags=NONE, children=2}
      ├─COLUMN {val=c.cohort_month, id=33, flags=NONE}
      └─COLUMN {val=c.order_month, id=35, flags=NONE}
--------------------------------------------------

============================================================
                          SUMMARY
============================================================
Total queries:         39
Successful:            38
Failed:                 1
Failed queries:    32
============================================================
