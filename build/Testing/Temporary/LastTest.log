Start testing: Aug 30 12:39 PDT
----------------------------------------------------------
1/28 Testing: test_tokenizer_verification
1/28 Test: test_tokenizer_verification
Command: "/Users/chiradip/codes/DB25-parser2/build/test_tokenizer_verification"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_tokenizer_verification" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
==================================
Tokenizer Verification Test
==================================

=== Simple SELECT ===
SQL: SELECT * FROM users
Expected: 4 tokens
Actual:   4 tokens

Token [0]:
  Expected:      KEYWORD 'SELECT'
  Actual:        KEYWORD 'SELECT' ✓
    Keyword ID: 133
    Position: 1:1

Token [1]:
  Expected:     OPERATOR '*'
  Actual:       OPERATOR '*' ✓
    Position: 1:8

Token [2]:
  Expected:      KEYWORD 'FROM'
  Actual:        KEYWORD 'FROM' ✓
    Keyword ID: 37
    Position: 1:10

Token [3]:
  Expected:   IDENTIFIER 'users'
  Actual:     IDENTIFIER 'users' ✓
    Position: 1:15

✓ EOF token present

✅ PASS: All tokens match!

=== SELECT with WHERE ===
SQL: SELECT id, name FROM users WHERE age > 25
Expected: 10 tokens
Actual:   10 tokens

Token [0]:
  Expected:      KEYWORD 'SELECT'
  Actual:        KEYWORD 'SELECT' ✓
    Keyword ID: 133
    Position: 1:1

Token [1]:
  Expected:   IDENTIFIER 'id'
  Actual:     IDENTIFIER 'id' ✓
    Position: 1:8

Token [2]:
  Expected:    DELIMITER ','
  Actual:      DELIMITER ',' ✓
    Position: 1:10

Token [3]:
  Expected:   IDENTIFIER 'name'
  Actual:     IDENTIFIER 'name' ✓
    Position: 1:12

Token [4]:
  Expected:      KEYWORD 'FROM'
  Actual:        KEYWORD 'FROM' ✓
    Keyword ID: 37
    Position: 1:17

Token [5]:
  Expected:   IDENTIFIER 'users'
  Actual:     IDENTIFIER 'users' ✓
    Position: 1:22

Token [6]:
  Expected:      KEYWORD 'WHERE'
  Actual:        KEYWORD 'WHERE' ✓
    Keyword ID: 104
    Position: 1:28

Token [7]:
  Expected:   IDENTIFIER 'age'
  Actual:     IDENTIFIER 'age' ✓
    Position: 1:34

Token [8]:
  Expected:     OPERATOR '>'
  Actual:       OPERATOR '>' ✓
    Position: 1:38

Token [9]:
  Expected:       NUMBER '25'
  Actual:         NUMBER '25' ✓
    Position: 1:40

✓ EOF token present

✅ PASS: All tokens match!

=== String Literals ===
SQL: SELECT * FROM users WHERE name = 'John Doe'
Expected: 8 tokens
Actual:   8 tokens

Token [0]:
  Expected:      KEYWORD 'SELECT'
  Actual:        KEYWORD 'SELECT' ✓
    Keyword ID: 133
    Position: 1:1

Token [1]:
  Expected:     OPERATOR '*'
  Actual:       OPERATOR '*' ✓
    Position: 1:8

Token [2]:
  Expected:      KEYWORD 'FROM'
  Actual:        KEYWORD 'FROM' ✓
    Keyword ID: 37
    Position: 1:10

Token [3]:
  Expected:   IDENTIFIER 'users'
  Actual:     IDENTIFIER 'users' ✓
    Position: 1:15

Token [4]:
  Expected:      KEYWORD 'WHERE'
  Actual:        KEYWORD 'WHERE' ✓
    Keyword ID: 104
    Position: 1:21

Token [5]:
  Expected:   IDENTIFIER 'name'
  Actual:     IDENTIFIER 'name' ✓
    Position: 1:27

Token [6]:
  Expected:     OPERATOR '='
  Actual:       OPERATOR '=' ✓
    Position: 1:32

Token [7]:
  Expected:       STRING ''John Doe''
  Actual:         STRING ''John Doe'' ✓
    Position: 1:34

✓ EOF token present

✅ PASS: All tokens match!

=== Numbers ===
SQL: SELECT * WHERE price BETWEEN 10.50 AND 99
Expected: 8 tokens
Actual:   8 tokens

Token [0]:
  Expected:      KEYWORD 'SELECT'
  Actual:        KEYWORD 'SELECT' ✓
    Keyword ID: 133
    Position: 1:1

Token [1]:
  Expected:     OPERATOR '*'
  Actual:       OPERATOR '*' ✓
    Position: 1:8

Token [2]:
  Expected:      KEYWORD 'WHERE'
  Actual:        KEYWORD 'WHERE' ✓
    Keyword ID: 104
    Position: 1:10

Token [3]:
  Expected:   IDENTIFIER 'price'
  Actual:     IDENTIFIER 'price' ✓
    Position: 1:16

Token [4]:
  Expected:      KEYWORD 'BETWEEN'
  Actual:        KEYWORD 'BETWEEN' ✓
    Keyword ID: 143
    Position: 1:22

Token [5]:
  Expected:       NUMBER '10.50'
  Actual:         NUMBER '10.50' ✓
    Position: 1:30

Token [6]:
  Expected:      KEYWORD 'AND'
  Actual:        KEYWORD 'AND' ✓
    Keyword ID: 14
    Position: 1:36

Token [7]:
  Expected:       NUMBER '99'
  Actual:         NUMBER '99' ✓
    Position: 1:40

✓ EOF token present

✅ PASS: All tokens match!

=== Operators ===
SQL: SELECT a + b * c - d / e
Expected: 10 tokens
Actual:   10 tokens

Token [0]:
  Expected:      KEYWORD 'SELECT'
  Actual:        KEYWORD 'SELECT' ✓
    Keyword ID: 133
    Position: 1:1

Token [1]:
  Expected:   IDENTIFIER 'a'
  Actual:     IDENTIFIER 'a' ✓
    Position: 1:8

Token [2]:
  Expected:     OPERATOR '+'
  Actual:       OPERATOR '+' ✓
    Position: 1:10

Token [3]:
  Expected:   IDENTIFIER 'b'
  Actual:     IDENTIFIER 'b' ✓
    Position: 1:12

Token [4]:
  Expected:     OPERATOR '*'
  Actual:       OPERATOR '*' ✓
    Position: 1:14

Token [5]:
  Expected:   IDENTIFIER 'c'
  Actual:     IDENTIFIER 'c' ✓
    Position: 1:16

Token [6]:
  Expected:     OPERATOR '-'
  Actual:       OPERATOR '-' ✓
    Position: 1:18

Token [7]:
  Expected:   IDENTIFIER 'd'
  Actual:     IDENTIFIER 'd' ✓
    Position: 1:20

Token [8]:
  Expected:     OPERATOR '/'
  Actual:       OPERATOR '/' ✓
    Position: 1:22

Token [9]:
  Expected:   IDENTIFIER 'e'
  Actual:     IDENTIFIER 'e' ✓
    Position: 1:24

✓ EOF token present

✅ PASS: All tokens match!

=== Parentheses and Semicolon ===
SQL: SELECT COUNT(*) FROM (SELECT * FROM t);
Expected: 13 tokens
Actual:   13 tokens

Token [0]:
  Expected:      KEYWORD 'SELECT'
  Actual:        KEYWORD 'SELECT' ✓
    Keyword ID: 133
    Position: 1:1

Token [1]:
  Expected:   IDENTIFIER 'COUNT'
  Actual:     IDENTIFIER 'COUNT' ✓
    Position: 1:8

Token [2]:
  Expected:    DELIMITER '('
  Actual:      DELIMITER '(' ✓
    Position: 1:13

Token [3]:
  Expected:     OPERATOR '*'
  Actual:       OPERATOR '*' ✓
    Position: 1:14

Token [4]:
  Expected:    DELIMITER ')'
  Actual:      DELIMITER ')' ✓
    Position: 1:15

Token [5]:
  Expected:      KEYWORD 'FROM'
  Actual:        KEYWORD 'FROM' ✓
    Keyword ID: 37
    Position: 1:17

Token [6]:
  Expected:    DELIMITER '('
  Actual:      DELIMITER '(' ✓
    Position: 1:22

Token [7]:
  Expected:      KEYWORD 'SELECT'
  Actual:        KEYWORD 'SELECT' ✓
    Keyword ID: 133
    Position: 1:23

Token [8]:
  Expected:     OPERATOR '*'
  Actual:       OPERATOR '*' ✓
    Position: 1:30

Token [9]:
  Expected:      KEYWORD 'FROM'
  Actual:        KEYWORD 'FROM' ✓
    Keyword ID: 37
    Position: 1:32

Token [10]:
  Expected:   IDENTIFIER 't'
  Actual:     IDENTIFIER 't' ✓
    Position: 1:37

Token [11]:
  Expected:    DELIMITER ')'
  Actual:      DELIMITER ')' ✓
    Position: 1:38

Token [12]:
  Expected:    DELIMITER ';'
  Actual:      DELIMITER ';' ✓
    Position: 1:39

✓ EOF token present

✅ PASS: All tokens match!

=== Qualified Identifiers ===
SQL: SELECT users.id, users.name FROM users
Expected: 10 tokens
Actual:   10 tokens

Token [0]:
  Expected:      KEYWORD 'SELECT'
  Actual:        KEYWORD 'SELECT' ✓
    Keyword ID: 133
    Position: 1:1

Token [1]:
  Expected:   IDENTIFIER 'users'
  Actual:     IDENTIFIER 'users' ✓
    Position: 1:8

Token [2]:
  Expected:     OPERATOR '.'
  Actual:       OPERATOR '.' ✓
    Position: 1:13

Token [3]:
  Expected:   IDENTIFIER 'id'
  Actual:     IDENTIFIER 'id' ✓
    Position: 1:14

Token [4]:
  Expected:    DELIMITER ','
  Actual:      DELIMITER ',' ✓
    Position: 1:16

Token [5]:
  Expected:   IDENTIFIER 'users'
  Actual:     IDENTIFIER 'users' ✓
    Position: 1:18

Token [6]:
  Expected:     OPERATOR '.'
  Actual:       OPERATOR '.' ✓
    Position: 1:23

Token [7]:
  Expected:   IDENTIFIER 'name'
  Actual:     IDENTIFIER 'name' ✓
    Position: 1:24

Token [8]:
  Expected:      KEYWORD 'FROM'
  Actual:        KEYWORD 'FROM' ✓
    Keyword ID: 37
    Position: 1:29

Token [9]:
  Expected:   IDENTIFIER 'users'
  Actual:     IDENTIFIER 'users' ✓
    Position: 1:34

✓ EOF token present

✅ PASS: All tokens match!

=== Comment Filtering Test ===
✅ PASS: Comments and whitespace properly filtered

=== Complex Operators ===
SQL: SELECT * WHERE a >= 10 AND b <= 20 AND c <> 5
Expected: 14 tokens
Actual:   14 tokens

Token [0]:
  Expected:      KEYWORD 'SELECT'
  Actual:        KEYWORD 'SELECT' ✓
    Keyword ID: 133
    Position: 1:1

Token [1]:
  Expected:     OPERATOR '*'
  Actual:       OPERATOR '*' ✓
    Position: 1:8

Token [2]:
  Expected:      KEYWORD 'WHERE'
  Actual:        KEYWORD 'WHERE' ✓
    Keyword ID: 104
    Position: 1:10

Token [3]:
  Expected:   IDENTIFIER 'a'
  Actual:     IDENTIFIER 'a' ✓
    Position: 1:16

Token [4]:
  Expected:     OPERATOR '>='
  Actual:       OPERATOR '>=' ✓
    Position: 1:18

Token [5]:
  Expected:       NUMBER '10'
  Actual:         NUMBER '10' ✓
    Position: 1:21

Token [6]:
  Expected:      KEYWORD 'AND'
  Actual:        KEYWORD 'AND' ✓
    Keyword ID: 14
    Position: 1:24

Token [7]:
  Expected:   IDENTIFIER 'b'
  Actual:     IDENTIFIER 'b' ✓
    Position: 1:28

Token [8]:
  Expected:     OPERATOR '<='
  Actual:       OPERATOR '<=' ✓
    Position: 1:30

Token [9]:
  Expected:       NUMBER '20'
  Actual:         NUMBER '20' ✓
    Position: 1:33

Token [10]:
  Expected:      KEYWORD 'AND'
  Actual:        KEYWORD 'AND' ✓
    Keyword ID: 14
    Position: 1:36

Token [11]:
  Expected:   IDENTIFIER 'c'
  Actual:     IDENTIFIER 'c' ✓
    Position: 1:40

Token [12]:
  Expected:     OPERATOR '<>'
  Actual:       OPERATOR '<>' ✓
    Position: 1:42

Token [13]:
  Expected:       NUMBER '5'
  Actual:         NUMBER '5' ✓
    Position: 1:45

✓ EOF token present

✅ PASS: All tokens match!

=== Keywords vs Identifiers ===
SQL: SELECT select_col FROM from_table WHERE where_col = 1
Expected: 8 tokens
Actual:   8 tokens

Token [0]:
  Expected:      KEYWORD 'SELECT'
  Actual:        KEYWORD 'SELECT' ✓
    Keyword ID: 133
    Position: 1:1

Token [1]:
  Expected:   IDENTIFIER 'select_col'
  Actual:     IDENTIFIER 'select_col' ✓
    Position: 1:8

Token [2]:
  Expected:      KEYWORD 'FROM'
  Actual:        KEYWORD 'FROM' ✓
    Keyword ID: 37
    Position: 1:19

Token [3]:
  Expected:   IDENTIFIER 'from_table'
  Actual:     IDENTIFIER 'from_table' ✓
    Position: 1:24

Token [4]:
  Expected:      KEYWORD 'WHERE'
  Actual:        KEYWORD 'WHERE' ✓
    Keyword ID: 104
    Position: 1:35

Token [5]:
  Expected:   IDENTIFIER 'where_col'
  Actual:     IDENTIFIER 'where_col' ✓
    Position: 1:41

Token [6]:
  Expected:     OPERATOR '='
  Actual:       OPERATOR '=' ✓
    Position: 1:51

Token [7]:
  Expected:       NUMBER '1'
  Actual:         NUMBER '1' ✓
    Position: 1:53

✓ EOF token present

✅ PASS: All tokens match!

==================================
SQL Test Suite Verification
==================================
Found sql_test.sqls at: ../tests/sql_test.sqls

[1] Testing: simple_select_2
SQL: SELECT id, name, email FROM customers;
  ✓ Tokens: 9 (clean, EOF present)
  First tokens: [KW:SELECT] [ID:id] [DEL:,] [ID:name] [DEL:,] ...

[2] Testing: simple_where_1
SQL: SELECT * FROM products WHERE price > 100;
  ✓ Tokens: 9 (clean, EOF present)
  First tokens: [KW:SELECT] [OP:*] [KW:FROM] [ID:products] [KW:WHERE] ...

[3] Testing: simple_where_2
SQL: SELECT name, age FROM employees 
WHERE department = 'Enginee...
  ✓ Tokens: 15 (clean, EOF present)
  First tokens: [KW:SELECT] [ID:name] [DEL:,] [ID:age] [KW:FROM] ...

[4] Testing: simple_join_1
SQL: SELECT u.name, o.order_date 
FROM users u 
INNER JOIN orders...
  ✓ Tokens: 24 (clean, EOF present)
  First tokens: [KW:SELECT] [ID:u] [OP:.] [ID:name] [DEL:,] ...

[5] Testing: simple_aggregate_1
SQL: SELECT department, COUNT(*) as employee_count 
FROM employee...
  ✓ Tokens: 15 (clean, EOF present)
  First tokens: [KW:SELECT] [ID:department] [DEL:,] [ID:COUNT] [DEL:(] ...

[6] Testing: simple_insert_1
SQL: INSERT INTO products (name, price, category) 
VALUES ('Lapto...
  ✓ Tokens: 19 (clean, EOF present)
  First tokens: [KW:INSERT] [KW:INTO] [ID:products] [DEL:(] [ID:name] ...

[7] Testing: simple_update_1
SQL: UPDATE users 
SET last_login = CURRENT_TIMESTAMP 
WHERE id =...
  ✓ Tokens: 11 (clean, EOF present)
  First tokens: [KW:UPDATE] [ID:users] [KW:SET] [ID:last_login] [OP:=] ...

[8] Testing: simple_delete_1
SQL: DELETE FROM sessions 
WHERE created_at < '2024-01-01';
  ✓ Tokens: 8 (clean, EOF present)
  First tokens: [KW:DELETE] [KW:FROM] [ID:sessions] [KW:WHERE] [ID:created_at] ...

[9] Testing: moderate_subquery_1
SQL: SELECT * FROM employees 
WHERE salary > (SELECT AVG(salary) ...
  ✓ Tokens: 17 (clean, EOF present)
  First tokens: [KW:SELECT] [OP:*] [KW:FROM] [ID:employees] [KW:WHERE] ...

[10] Testing: moderate_join_2
SQL: SELECT 
    c.name AS customer_name,
    p.name AS product_n...
  ✓ Tokens: 66 (clean, EOF present)
  First tokens: [KW:SELECT] [ID:c] [OP:.] [ID:name] [KW:AS] ...

[11] Testing: moderate_case_1
SQL: SELECT 
    name,
    salary,
    CASE 
        WHEN salary ...
  ✓ Tokens: 34 (clean, EOF present)
  First tokens: [KW:SELECT] [ID:name] [DEL:,] [ID:salary] [DEL:,] ...

[12] Testing: moderate_having_1
SQL: SELECT 
    department,
    AVG(salary) as avg_salary,
    C...
  ✓ Tokens: 40 (clean, EOF present)
  First tokens: [KW:SELECT] [ID:department] [DEL:,] [ID:AVG] [DEL:(] ...

[13] Testing: moderate_union_1
SQL: SELECT name, email, 'customer' as type FROM customers
UNION ...
  ✓ Tokens: 38 (clean, EOF present)
  First tokens: [KW:SELECT] [ID:name] [DEL:,] [ID:email] [DEL:,] ...

[14] Testing: complex_cte_1
SQL: WITH regional_sales AS (
    SELECT 
        region,
       ...
  ✓ Tokens: 86 (clean, EOF present)
  First tokens: [KW:WITH] [ID:regional_sales] [KW:AS] [DEL:(] [KW:SELECT] ...

[15] Testing: complex_window_1
SQL: SELECT 
    employee_id,
    department,
    salary,
    AVG...
  ✓ Tokens: 89 (clean, EOF present)
  First tokens: [KW:SELECT] [ID:employee_id] [DEL:,] [ID:department] [DEL:,] ...

[16] Testing: complex_recursive_cte
SQL: WITH RECURSIVE employee_hierarchy AS (
    -- Anchor: top-le...
  ✓ Tokens: 87 (clean, EOF present)
  First tokens: [KW:WITH] [KW:RECURSIVE] [ID:employee_hierarchy] [KW:AS] [DEL:(] ...

[17] Testing: complex_pivot_1
SQL: SELECT 
    product_category,
    SUM(CASE WHEN EXTRACT(MONT...
  ✓ Tokens: 154 (clean, EOF present)
  First tokens: [KW:SELECT] [ID:product_category] [DEL:,] [ID:SUM] [DEL:(] ...

[18] Testing: complex_lateral_join
SQL: SELECT 
    c.customer_id,
    c.customer_name,
    recent_o...
  ✓ Tokens: 101 (clean, EOF present)
  First tokens: [KW:SELECT] [ID:c] [OP:.] [ID:customer_id] [DEL:,] ...

[19] Testing: extreme_analytical_1
SQL: WITH RECURSIVE date_series AS (
    SELECT DATE '2024-01-01'...
  ✓ Tokens: 510 (clean, EOF present)
  First tokens: [KW:WITH] [KW:RECURSIVE] [ID:date_series] [KW:AS] [DEL:(] ...

[20] Testing: extreme_nested_json
SQL: WITH order_details AS (
    SELECT 
        o.id,
        o....
  ✓ Tokens: 612 (clean, EOF present)
  First tokens: [KW:WITH] [ID:order_details] [KW:AS] [DEL:(] [KW:SELECT] ...

[21] Testing: extreme_ddl_transaction
SQL: BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;

CREATE SCHE...
  ✓ Tokens: 694 (clean, EOF present)
  First tokens: [KW:BEGIN] [KW:TRANSACTION] [KW:ISOLATION] [KW:LEVEL] [KW:SERIALIZABLE] ...

[22] Testing: extreme_merge_upsert
SQL: WITH source_data AS (
    SELECT 
        s.external_id,
   ...
  ✓ Tokens: 430 (clean, EOF present)
  First tokens: [KW:WITH] [ID:source_data] [KW:AS] [DEL:(] [KW:SELECT] ...

==================================
SQL Test Suite Results:
  Total: 22 queries
  Passed: 22
  Failed: 0
✅ ALL SQL TEST SUITE QUERIES TOKENIZED CORRECTLY!

==================================
✅ ALL TOKENIZER VERIFICATION TESTS PASSED!
==================================

The tokenizer is producing correct tokens for the parser.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_tokenizer_verification" end time: Aug 30 12:39 PDT
"test_tokenizer_verification" time elapsed: 00:00:00
----------------------------------------------------------

2/28 Testing: test_parser_basic
2/28 Test: test_parser_basic
Command: "/Users/chiradip/codes/DB25-parser2/build/test_parser_basic"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_parser_basic" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 10 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 10 tests from BasicParserTest
[ RUN      ] BasicParserTest.EmptyInput
[       OK ] BasicParserTest.EmptyInput (0 ms)
[ RUN      ] BasicParserTest.SimpleSelect
[       OK ] BasicParserTest.SimpleSelect (0 ms)
[ RUN      ] BasicParserTest.InvalidSQL
[       OK ] BasicParserTest.InvalidSQL (0 ms)
[ RUN      ] BasicParserTest.SelectWithColumns
[       OK ] BasicParserTest.SelectWithColumns (0 ms)
[ RUN      ] BasicParserTest.SelectWithWhere
[       OK ] BasicParserTest.SelectWithWhere (0 ms)
[ RUN      ] BasicParserTest.SimpleInsert
[       OK ] BasicParserTest.SimpleInsert (0 ms)
[ RUN      ] BasicParserTest.SimpleUpdate
[       OK ] BasicParserTest.SimpleUpdate (0 ms)
[ RUN      ] BasicParserTest.SimpleDelete
[       OK ] BasicParserTest.SimpleDelete (0 ms)
[ RUN      ] BasicParserTest.MemoryManagement
[       OK ] BasicParserTest.MemoryManagement (0 ms)
[ RUN      ] BasicParserTest.NodeCount
[       OK ] BasicParserTest.NodeCount (0 ms)
[----------] 10 tests from BasicParserTest (0 ms total)

[----------] Global test environment tear-down
[==========] 10 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 10 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_parser_basic" end time: Aug 30 12:39 PDT
"test_parser_basic" time elapsed: 00:00:00
----------------------------------------------------------

3/28 Testing: test_parser_select
3/28 Test: test_parser_select
Command: "/Users/chiradip/codes/DB25-parser2/build/test_parser_select"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_parser_select" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 21 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 21 tests from SelectParserTest
[ RUN      ] SelectParserTest.SelectStarHasCorrectStructure
[       OK ] SelectParserTest.SelectStarHasCorrectStructure (0 ms)
[ RUN      ] SelectParserTest.SelectListWithColumns
[       OK ] SelectParserTest.SelectListWithColumns (0 ms)
[ RUN      ] SelectParserTest.FromClauseWithTable
[       OK ] SelectParserTest.FromClauseWithTable (0 ms)
[ RUN      ] SelectParserTest.WhereClausePresent
[       OK ] SelectParserTest.WhereClausePresent (0 ms)
[ RUN      ] SelectParserTest.WhereWithBinaryExpression
[       OK ] SelectParserTest.WhereWithBinaryExpression (0 ms)
[ RUN      ] SelectParserTest.OrderByClause
[       OK ] SelectParserTest.OrderByClause (0 ms)
[ RUN      ] SelectParserTest.OrderByWithDirection
[       OK ] SelectParserTest.OrderByWithDirection (0 ms)
[ RUN      ] SelectParserTest.LimitClause
[       OK ] SelectParserTest.LimitClause (0 ms)
[ RUN      ] SelectParserTest.LimitWithOffset
[       OK ] SelectParserTest.LimitWithOffset (0 ms)
[ RUN      ] SelectParserTest.ColumnIdentifiers
[       OK ] SelectParserTest.ColumnIdentifiers (0 ms)
[ RUN      ] SelectParserTest.QualifiedColumnNames
[       OK ] SelectParserTest.QualifiedColumnNames (0 ms)
[ RUN      ] SelectParserTest.ExpressionInSelectList
[       OK ] SelectParserTest.ExpressionInSelectList (0 ms)
[ RUN      ] SelectParserTest.FunctionCallInSelect
[       OK ] SelectParserTest.FunctionCallInSelect (0 ms)
[ RUN      ] SelectParserTest.CompleteSelectStatement
[       OK ] SelectParserTest.CompleteSelectStatement (0 ms)
[ RUN      ] SelectParserTest.ColumnAlias
[       OK ] SelectParserTest.ColumnAlias (0 ms)
[ RUN      ] SelectParserTest.TableAlias
[       OK ] SelectParserTest.TableAlias (0 ms)
[ RUN      ] SelectParserTest.SelectStar
[       OK ] SelectParserTest.SelectStar (0 ms)
[ RUN      ] SelectParserTest.QualifiedStar
[       OK ] SelectParserTest.QualifiedStar (0 ms)
[ RUN      ] SelectParserTest.DistinctSimple
[       OK ] SelectParserTest.DistinctSimple (0 ms)
[ RUN      ] SelectParserTest.DistinctMultipleColumns
[       OK ] SelectParserTest.DistinctMultipleColumns (0 ms)
[ RUN      ] SelectParserTest.DistinctWithStar
[       OK ] SelectParserTest.DistinctWithStar (0 ms)
[----------] 21 tests from SelectParserTest (0 ms total)

[----------] Global test environment tear-down
[==========] 21 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 21 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_parser_select" end time: Aug 30 12:39 PDT
"test_parser_select" time elapsed: 00:00:00
----------------------------------------------------------

4/28 Testing: test_parser_correctness
4/28 Test: test_parser_correctness
Command: "/Users/chiradip/codes/DB25-parser2/build/test_parser_correctness"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_parser_correctness" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 17 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 17 tests from ParserCorrectnessTest
[ RUN      ] ParserCorrectnessTest.SimpleSelectStructure
[       OK ] ParserCorrectnessTest.SimpleSelectStructure (0 ms)
[ RUN      ] ParserCorrectnessTest.QualifiedColumnCorrectness
[       OK ] ParserCorrectnessTest.QualifiedColumnCorrectness (0 ms)
[ RUN      ] ParserCorrectnessTest.WhereClauseStructure
[       OK ] ParserCorrectnessTest.WhereClauseStructure (0 ms)
[ RUN      ] ParserCorrectnessTest.FunctionCallStructure
[       OK ] ParserCorrectnessTest.FunctionCallStructure (0 ms)
[ RUN      ] ParserCorrectnessTest.OrderByStructure
[       OK ] ParserCorrectnessTest.OrderByStructure (0 ms)
[ RUN      ] ParserCorrectnessTest.ComplexExpressionStructure
[       OK ] ParserCorrectnessTest.ComplexExpressionStructure (0 ms)
[ RUN      ] ParserCorrectnessTest.ParentChildRelationships
[       OK ] ParserCorrectnessTest.ParentChildRelationships (0 ms)
[ RUN      ] ParserCorrectnessTest.SiblingRelationships
[       OK ] ParserCorrectnessTest.SiblingRelationships (0 ms)
[ RUN      ] ParserCorrectnessTest.LiteralTypes
[       OK ] ParserCorrectnessTest.LiteralTypes (0 ms)
[ RUN      ] ParserCorrectnessTest.EmptySelectList
[       OK ] ParserCorrectnessTest.EmptySelectList (0 ms)
[ RUN      ] ParserCorrectnessTest.MissingFromClause
[       OK ] ParserCorrectnessTest.MissingFromClause (0 ms)
[ RUN      ] ParserCorrectnessTest.MultipleWhereConditions
[       OK ] ParserCorrectnessTest.MultipleWhereConditions (0 ms)
[ RUN      ] ParserCorrectnessTest.InsertStatementStructure
[       OK ] ParserCorrectnessTest.InsertStatementStructure (0 ms)
[ RUN      ] ParserCorrectnessTest.UpdateStatementStructure
[       OK ] ParserCorrectnessTest.UpdateStatementStructure (0 ms)
[ RUN      ] ParserCorrectnessTest.DeleteStatementStructure
[       OK ] ParserCorrectnessTest.DeleteStatementStructure (0 ms)
[ RUN      ] ParserCorrectnessTest.NodeIDsAreUnique
[       OK ] ParserCorrectnessTest.NodeIDsAreUnique (0 ms)
[ RUN      ] ParserCorrectnessTest.DebugPrintComplexQuery

=== AST Structure ===
SelectStmt (id:1, children:6)
  SelectList (id:3, children:3)
    ColumnRef [u.id] (id:2, children:0)
    ColumnRef [u.name] (id:4, children:0)
    FunctionCall [COUNT] (id:5, children:1)
      Star (id:6, children:0)
  FromClause (id:8, children:1)
    TableRef [users] (id:7, children:0)
  WhereClause (id:12, children:1)
    BinaryExpr [>] (id:11, children:2)
      ColumnRef [u.age] (id:9, children:0)
      IntegerLiteral [21] (id:10, children:0)
  GroupByClause (id:13, children:2)
    ColumnRef [u.id] (id:14, children:0)
    ColumnRef [u.name] (id:15, children:0)
  OrderByClause (id:18, children:1)
    FunctionCall [COUNT] (id:16, children:1)
      Star (id:17, children:0)
  LimitClause (id:19, children:1)
    IntegerLiteral [10] (id:20, children:0)
===================
[       OK ] ParserCorrectnessTest.DebugPrintComplexQuery (0 ms)
[----------] 17 tests from ParserCorrectnessTest (0 ms total)

[----------] Global test environment tear-down
[==========] 17 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 17 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_parser_correctness" end time: Aug 30 12:39 PDT
"test_parser_correctness" time elapsed: 00:00:00
----------------------------------------------------------

5/28 Testing: test_parser_capabilities
5/28 Test: test_parser_capabilities
Command: "/Users/chiradip/codes/DB25-parser2/build/test_parser_capabilities"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_parser_capabilities" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 10 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 10 tests from ParserCapabilitiesTest
[ RUN      ] ParserCapabilitiesTest.BasicSelectCapabilities

==== BASIC SELECT CAPABILITIES ====
✓ Basic SELECT features work
[       OK ] ParserCapabilitiesTest.BasicSelectCapabilities (0 ms)
[ RUN      ] ParserCapabilitiesTest.WhereClauseCapabilities

==== WHERE CLAUSE CAPABILITIES ====
✓ WHERE clause with AND/OR works
[       OK ] ParserCapabilitiesTest.WhereClauseCapabilities (0 ms)
[ RUN      ] ParserCapabilitiesTest.ExpressionCapabilities

==== EXPRESSION CAPABILITIES ====
✓ Expression parsing with precedence works
[       OK ] ParserCapabilitiesTest.ExpressionCapabilities (0 ms)
[ RUN      ] ParserCapabilitiesTest.FunctionCapabilities

==== FUNCTION CAPABILITIES ====
✓ Function calls work (simplified argument parsing)
[       OK ] ParserCapabilitiesTest.FunctionCapabilities (0 ms)
[ RUN      ] ParserCapabilitiesTest.OrderByCapabilities

==== ORDER BY CAPABILITIES ====
✓ ORDER BY with multiple columns works
[       OK ] ParserCapabilitiesTest.OrderByCapabilities (0 ms)
[ RUN      ] ParserCapabilitiesTest.LimitOffsetCapabilities

==== LIMIT/OFFSET CAPABILITIES ====
✓ LIMIT/OFFSET works
[       OK ] ParserCapabilitiesTest.LimitOffsetCapabilities (0 ms)
[ RUN      ] ParserCapabilitiesTest.ComplexRealWorldQueries

==== COMPLEX REAL-WORLD QUERIES ====

=== E-commerce Order Query ===
SQL: SELECT o.id, u.name, p.title, o.quantity * p.price FROM orders o, users u, products p WHERE o.user_id = u.id AND o.product_id = p.id AND o.status = 'shipped' AND o.date > '2024-01-01' ORDER BY o.date DESC LIMIT 100
✓ PARSED SUCCESSFULLY
  Root: SELECT, Children: 5

=== Analytics Query with Aggregates ===
SQL: SELECT COUNT(*), MAX(amount), MIN(amount), AVG(amount) FROM transactions WHERE status = 'completed' AND amount > 0 AND date >= '2024-01-01' AND date <= '2024-12-31'
✓ PARSED SUCCESSFULLY
  Root: SELECT, Children: 3

=== User Search with Multiple Conditions ===
SQL: SELECT u.id, u.name, u.email, p.name, p.avatar FROM users u, profiles p WHERE u.id = p.user_id AND (u.name LIKE '%john%' OR u.email LIKE '%john%') AND u.status = 'active' AND u.verified = 1 ORDER BY u.created_at DESC LIMIT 20
✓ PARSED SUCCESSFULLY
  Root: SELECT, Children: 5
[       OK ] ParserCapabilitiesTest.ComplexRealWorldQueries (0 ms)
[ RUN      ] ParserCapabilitiesTest.CurrentLimitations

==== CURRENT LIMITATIONS ====

=== Subquery (not supported) ===
SQL: SELECT * FROM users WHERE id IN (SELECT user_id FROM orders)
✓ PARSED SUCCESSFULLY
  Root: SELECT, Children: 3

=== CASE expression (not supported) ===
SQL: SELECT CASE WHEN age < 18 THEN 'minor' ELSE 'adult' END FROM users
✓ PARSED SUCCESSFULLY
  Root: SELECT, Children: 2

=== UNION (not supported) ===
SQL: SELECT id FROM users UNION SELECT id FROM customers
✓ PARSED SUCCESSFULLY
  Root: Other, Children: 2

=== CTE/WITH (not supported) ===
SQL: WITH active_users AS (SELECT * FROM users WHERE status = 'active') SELECT * FROM active_users
✓ PARSED SUCCESSFULLY
  Root: SELECT, Children: 3

=== Window functions (not supported) ===
SQL: SELECT id, ROW_NUMBER() OVER (ORDER BY id) FROM users
✓ PARSED SUCCESSFULLY
  Root: SELECT, Children: 2

=== DISTINCT (not supported) ===
SQL: SELECT DISTINCT category FROM products
✓ PARSED SUCCESSFULLY
  Root: SELECT, Children: 2
[       OK ] ParserCapabilitiesTest.CurrentLimitations (0 ms)
[ RUN      ] ParserCapabilitiesTest.StressTestComplexQuery

==== STRESS TEST - Maximum Complexity ====

=== Maximum Complexity Query ===
SQL: SELECT   u.id, u.name, u.email,   p.title, p.description, p.price * 1.2,   c.name, c.discount,   o.quantity, o.quantity * p.price * (1 - c.discount / 100),   s.status, s.tracking_number,   COUNT(*), MAX(p.price), MIN(p.price), SUM(o.quantity) FROM   users u, products p, categories c, orders o, shipments s WHERE   u.id = o.user_id AND   p.id = o.product_id AND   c.id = p.category_id AND   o.id = s.order_id AND   u.status = 'active' AND   u.verified = 1 AND   p.stock > 0 AND   p.price > 10 AND p.price < 1000 AND   c.active = 1 AND   o.status = 'paid' OR o.status = 'shipped' AND   o.date > '2024-01-01' AND o.date < '2024-12-31' AND   s.status = 'delivered' OR s.status = 'in_transit' ORDER BY   o.date DESC, p.price ASC, u.name, c.name DESC, o.quantity LIMIT 100 OFFSET 500
✓ PARSED SUCCESSFULLY
  Root: SELECT, Children: 5
[       OK ] ParserCapabilitiesTest.StressTestComplexQuery (0 ms)
[ RUN      ] ParserCapabilitiesTest.CapabilitySummary

========================================
    DB25 PARSER SELECT CAPABILITIES    
========================================

✅ SUPPORTED FEATURES:
  • SELECT with multiple columns
  • Column aliases (parsed but not stored)
  • Qualified column names (table.column)
  • SELECT * and table.*
  • FROM with multiple tables (comma-separated)
  • Table aliases
  • JOIN clauses (INNER, LEFT, RIGHT, FULL OUTER, CROSS)
  • JOIN ON conditions with complex expressions
  • WHERE with comparison operators (=, <, >, <=, >=, <>)
  • AND/OR boolean operators with proper precedence
  • NOT operator (unary)
  • Arithmetic expressions (+, -, *, /, %)
  • Unary operators (-, +)
  • GROUP BY with multiple columns and expressions
  • GROUP BY with positional references (1, 2)
  • HAVING clause with aggregate conditions
  • Aggregate functions (COUNT(*), SUM, AVG, MIN, MAX)
  • Function calls with arguments
  • ORDER BY with multiple columns and ASC/DESC
  • LIMIT and OFFSET
  • BETWEEN x AND y operator
  • IN (list) operator
  • LIKE pattern matching
  • IS NULL / IS NOT NULL
  • Literals (integers, strings)
  • Operator precedence (OR < AND < SQL ops < comparison < arithmetic)

❌ NOT SUPPORTED:
  • Subqueries (IN with SELECT, EXISTS, scalar subqueries)
  • DISTINCT
  • CASE expressions
  • UNION, INTERSECT, EXCEPT
  • CTEs (WITH clause)
  • Window functions
  • Type casting (::type or CAST)
  • Comments in SQL

📊 COMPLEXITY LEVEL:
  Can handle: Medium complexity queries
  - Multi-table queries (using WHERE joins)
  - Complex WHERE conditions with AND/OR
  - Expressions with arithmetic
  - Multiple ORDER BY columns
  - Aggregate functions (parsing only)

🎯 SUITABLE FOR:
  - Simple to medium CRUD operations
  - Basic reporting queries
  - Query analysis and AST generation
  - Educational purposes
  - Embedded SQL parsing

⚠️  PRODUCTION READINESS:
  - ~40% SQL-92 coverage
  - Good for basic SELECT/INSERT/UPDATE/DELETE
  - Not suitable for complex analytics
  - Missing critical features for production DBMS
========================================

[       OK ] ParserCapabilitiesTest.CapabilitySummary (0 ms)
[----------] 10 tests from ParserCapabilitiesTest (0 ms total)

[----------] Global test environment tear-down
[==========] 10 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 10 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_parser_capabilities" end time: Aug 30 12:39 PDT
"test_parser_capabilities" time elapsed: 00:00:00
----------------------------------------------------------

6/28 Testing: test_join_parsing
6/28 Test: test_join_parsing
Command: "/Users/chiradip/codes/DB25-parser2/build/test_join_parsing"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_join_parsing" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from JoinParsingTest
[ RUN      ] JoinParsingTest.CurrentJoinBehavior

=== Current JOIN Parsing Behavior ===

SQL: SELECT * FROM users JOIN orders ON users.id = orders.user_id
AST Structure:
SelectStmt
  SelectList
    Star
  FromClause
    TableRef [users]
    JoinClause [JOIN]
      TableRef [orders]
      BinaryExpr [=]
        ColumnRef [users.id]
        ColumnRef [orders.user_id]

SQL: SELECT * FROM users LEFT JOIN orders ON users.id = orders.user_id
AST Structure:
SelectStmt
  SelectList
    Star
  FromClause
    TableRef [users]
    JoinClause [LEFT JOIN]
      TableRef [orders]
      BinaryExpr [=]
        ColumnRef [users.id]
        ColumnRef [orders.user_id]

SQL: SELECT * FROM users u JOIN orders o ON u.id = o.user_id JOIN products p ON o.product_id = p.id
AST Structure:
SelectStmt
  SelectList
    Star
  FromClause
    TableRef [users]
    JoinClause [JOIN]
      TableRef [orders]
      BinaryExpr [=]
        ColumnRef [u.id]
        ColumnRef [o.user_id]
    JoinClause [JOIN]
      TableRef [products]
      BinaryExpr [=]
        ColumnRef [o.product_id]
        ColumnRef [p.id]
[       OK ] JoinParsingTest.CurrentJoinBehavior (0 ms)
[----------] 1 test from JoinParsingTest (0 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (0 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_join_parsing" end time: Aug 30 12:39 PDT
"test_join_parsing" time elapsed: 00:00:00
----------------------------------------------------------

7/28 Testing: test_join_comprehensive
7/28 Test: test_join_comprehensive
Command: "/Users/chiradip/codes/DB25-parser2/build/test_join_comprehensive"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_join_comprehensive" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 12 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 12 tests from JoinComprehensiveTest
[ RUN      ] JoinComprehensiveTest.InnerJoin
[       OK ] JoinComprehensiveTest.InnerJoin (0 ms)
[ RUN      ] JoinComprehensiveTest.LeftJoin
[       OK ] JoinComprehensiveTest.LeftJoin (0 ms)
[ RUN      ] JoinComprehensiveTest.LeftOuterJoin
[       OK ] JoinComprehensiveTest.LeftOuterJoin (0 ms)
[ RUN      ] JoinComprehensiveTest.RightJoin
[       OK ] JoinComprehensiveTest.RightJoin (0 ms)
[ RUN      ] JoinComprehensiveTest.FullOuterJoin
[       OK ] JoinComprehensiveTest.FullOuterJoin (0 ms)
[ RUN      ] JoinComprehensiveTest.CrossJoin
[       OK ] JoinComprehensiveTest.CrossJoin (0 ms)
[ RUN      ] JoinComprehensiveTest.MultipleJoins
[       OK ] JoinComprehensiveTest.MultipleJoins (0 ms)
[ RUN      ] JoinComprehensiveTest.JoinWithComplexCondition
[       OK ] JoinComprehensiveTest.JoinWithComplexCondition (0 ms)
[ RUN      ] JoinComprehensiveTest.MixedJoinStyles
[       OK ] JoinComprehensiveTest.MixedJoinStyles (0 ms)
[ RUN      ] JoinComprehensiveTest.JoinWithUsing
[       OK ] JoinComprehensiveTest.JoinWithUsing (0 ms)
[ RUN      ] JoinComprehensiveTest.JoinFollowedByWhere
[       OK ] JoinComprehensiveTest.JoinFollowedByWhere (0 ms)
[ RUN      ] JoinComprehensiveTest.JoinWithTableAliases
[       OK ] JoinComprehensiveTest.JoinWithTableAliases (0 ms)
[----------] 12 tests from JoinComprehensiveTest (0 ms total)

[----------] Global test environment tear-down
[==========] 12 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 12 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_join_comprehensive" end time: Aug 30 12:39 PDT
"test_join_comprehensive" time elapsed: 00:00:00
----------------------------------------------------------

8/28 Testing: test_sql_operators
8/28 Test: test_sql_operators
Command: "/Users/chiradip/codes/DB25-parser2/build/test_sql_operators"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_sql_operators" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 12 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 12 tests from SQLOperatorsTest
[ RUN      ] SQLOperatorsTest.BetweenOperator
[       OK ] SQLOperatorsTest.BetweenOperator (0 ms)
[ RUN      ] SQLOperatorsTest.InOperator
[       OK ] SQLOperatorsTest.InOperator (0 ms)
[ RUN      ] SQLOperatorsTest.InOperatorNumbers
[       OK ] SQLOperatorsTest.InOperatorNumbers (0 ms)
[ RUN      ] SQLOperatorsTest.LikeOperator
[       OK ] SQLOperatorsTest.LikeOperator (0 ms)
[ RUN      ] SQLOperatorsTest.IsNullOperator
[       OK ] SQLOperatorsTest.IsNullOperator (0 ms)
[ RUN      ] SQLOperatorsTest.IsNotNullOperator
[       OK ] SQLOperatorsTest.IsNotNullOperator (0 ms)
[ RUN      ] SQLOperatorsTest.NotOperator
[       OK ] SQLOperatorsTest.NotOperator (0 ms)
[ RUN      ] SQLOperatorsTest.NotWithComparison
[       OK ] SQLOperatorsTest.NotWithComparison (0 ms)
[ RUN      ] SQLOperatorsTest.UnaryMinus
[       OK ] SQLOperatorsTest.UnaryMinus (0 ms)
[ RUN      ] SQLOperatorsTest.NegativeNumberLiteral
[       OK ] SQLOperatorsTest.NegativeNumberLiteral (0 ms)
[ RUN      ] SQLOperatorsTest.ComplexExpression
[       OK ] SQLOperatorsTest.ComplexExpression (0 ms)
[ RUN      ] SQLOperatorsTest.OperatorPrecedence
[       OK ] SQLOperatorsTest.OperatorPrecedence (0 ms)
[----------] 12 tests from SQLOperatorsTest (0 ms total)

[----------] Global test environment tear-down
[==========] 12 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 12 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_sql_operators" end time: Aug 30 12:39 PDT
"test_sql_operators" time elapsed: 00:00:00
----------------------------------------------------------

9/28 Testing: test_group_by
9/28 Test: test_group_by
Command: "/Users/chiradip/codes/DB25-parser2/build/test_group_by"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_group_by" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 15 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 15 tests from GroupByTest
[ RUN      ] GroupByTest.SimpleGroupBy
[       OK ] GroupByTest.SimpleGroupBy (0 ms)
[ RUN      ] GroupByTest.MultipleGroupByColumns
[       OK ] GroupByTest.MultipleGroupByColumns (0 ms)
[ RUN      ] GroupByTest.GroupByWithExpression
[       OK ] GroupByTest.GroupByWithExpression (0 ms)
[ RUN      ] GroupByTest.GroupByWithHaving
[       OK ] GroupByTest.GroupByWithHaving (0 ms)
[ RUN      ] GroupByTest.HavingWithoutGroupBy
[       OK ] GroupByTest.HavingWithoutGroupBy (0 ms)
[ RUN      ] GroupByTest.AggregateFunction_COUNT
[       OK ] GroupByTest.AggregateFunction_COUNT (0 ms)
[ RUN      ] GroupByTest.AggregateFunction_SUM
[       OK ] GroupByTest.AggregateFunction_SUM (0 ms)
[ RUN      ] GroupByTest.AggregateFunction_AVG
[       OK ] GroupByTest.AggregateFunction_AVG (0 ms)
[ RUN      ] GroupByTest.AggregateFunction_MIN
[       OK ] GroupByTest.AggregateFunction_MIN (0 ms)
[ RUN      ] GroupByTest.AggregateFunction_MAX
[       OK ] GroupByTest.AggregateFunction_MAX (0 ms)
[ RUN      ] GroupByTest.MultipleAggregates
[       OK ] GroupByTest.MultipleAggregates (0 ms)
[ RUN      ] GroupByTest.GroupByWithOrderBy
[       OK ] GroupByTest.GroupByWithOrderBy (0 ms)
[ RUN      ] GroupByTest.ComplexHavingCondition
[       OK ] GroupByTest.ComplexHavingCondition (0 ms)
[ RUN      ] GroupByTest.GroupByQualifiedColumns
[       OK ] GroupByTest.GroupByQualifiedColumns (0 ms)
[ RUN      ] GroupByTest.GroupByPosition
[       OK ] GroupByTest.GroupByPosition (0 ms)
[----------] 15 tests from GroupByTest (0 ms total)

[----------] Global test environment tear-down
[==========] 15 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 15 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_group_by" end time: Aug 30 12:39 PDT
"test_group_by" time elapsed: 00:00:00
----------------------------------------------------------

10/28 Testing: test_case_expr
10/28 Test: test_case_expr
Command: "/Users/chiradip/codes/DB25-parser2/build/test_case_expr"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_case_expr" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 8 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 8 tests from CaseExprTest
[ RUN      ] CaseExprTest.SimpleCaseExpression
[       OK ] CaseExprTest.SimpleCaseExpression (0 ms)
[ RUN      ] CaseExprTest.MultipleWhenClauses
[       OK ] CaseExprTest.MultipleWhenClauses (0 ms)
[ RUN      ] CaseExprTest.CaseWithoutElse
[       OK ] CaseExprTest.CaseWithoutElse (0 ms)
[ RUN      ] CaseExprTest.SearchedCase
[       OK ] CaseExprTest.SearchedCase (0 ms)
[ RUN      ] CaseExprTest.NestedCase
[       OK ] CaseExprTest.NestedCase (0 ms)
[ RUN      ] CaseExprTest.CaseInWhere
[       OK ] CaseExprTest.CaseInWhere (0 ms)
[ RUN      ] CaseExprTest.CaseWithComplexExpressions
[       OK ] CaseExprTest.CaseWithComplexExpressions (0 ms)
[ RUN      ] CaseExprTest.CaseWithNull
[       OK ] CaseExprTest.CaseWithNull (0 ms)
[----------] 8 tests from CaseExprTest (0 ms total)

[----------] Global test environment tear-down
[==========] 8 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 8 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_case_expr" end time: Aug 30 12:39 PDT
"test_case_expr" time elapsed: 00:00:00
----------------------------------------------------------

11/28 Testing: test_ast_verification
11/28 Test: test_ast_verification
Command: "/Users/chiradip/codes/DB25-parser2/build/test_ast_verification"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_ast_verification" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 14 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 14 tests from ASTVerificationTest
[ RUN      ] ASTVerificationTest.BasicSelectStructure
[       OK ] ASTVerificationTest.BasicSelectStructure (0 ms)
[ RUN      ] ASTVerificationTest.DistinctFlagAndStructure
DISTINCT Query AST:
SelectStmt (DISTINCT) (id:1, children:3)
  SelectList (id:3, children:2)
    ColumnRef [department] (id:2, children:0)
    FunctionCall [COUNT] (id:4, children:1)
      Star (id:5, children:0)
  FromClause (id:7, children:1)
    TableRef [employees] (id:6, children:0)
  GroupByClause (id:8, children:1)
    ColumnRef [department] (id:9, children:0)

[       OK ] ASTVerificationTest.DistinctFlagAndStructure (0 ms)
[ RUN      ] ASTVerificationTest.ComplexJoinStructure
Complex JOIN AST:
SelectStmt (id:1, children:3)
  SelectList (id:3, children:3)
    ColumnRef [u.name] (id:2, children:0)
    ColumnRef [o.total] (id:4, children:0)
    ColumnRef [p.price] (id:5, children:0)
  FromClause (id:7, children:3)
    TableRef [users] (id:6, children:0)
    JoinClause [INNER JOIN] (id:8, children:2)
      TableRef [orders] (id:9, children:0)
      BinaryExpr [=] (id:12, children:2)
        ColumnRef [u.id] (id:10, children:0)
        ColumnRef [o.user_id] (id:11, children:0)
    JoinClause [LEFT JOIN] (id:13, children:2)
      TableRef [products] (id:14, children:0)
      BinaryExpr [=] (id:17, children:2)
        ColumnRef [o.product_id] (id:15, children:0)
        ColumnRef [p.id] (id:16, children:0)
  WhereClause (id:21, children:1)
    BinaryExpr [=] (id:20, children:2)
      ColumnRef [u.status] (id:18, children:0)
      StringLiteral ['active'] (id:19, children:0)

[       OK ] ASTVerificationTest.ComplexJoinStructure (0 ms)
[ RUN      ] ASTVerificationTest.GroupByHavingStructure
GROUP BY/HAVING AST:
SelectStmt (id:1, children:5)
  SelectList (id:3, children:4)
    ColumnRef [department] (id:2, children:0)
    ColumnRef [job_title] (id:4, children:0)
    FunctionCall [COUNT] (id:5, children:1)
      Star (id:6, children:0)
    FunctionCall [AVG] (id:7, children:1)
      Identifier [salary] (id:8, children:0)
  FromClause (id:10, children:1)
    TableRef [employees] (id:9, children:0)
  GroupByClause (id:11, children:2)
    ColumnRef [department] (id:12, children:0)
    ColumnRef [job_title] (id:13, children:0)
  HavingClause (id:23, children:1)
    BinaryExpr [AND] (id:22, children:2)
      BinaryExpr [>] (id:17, children:2)
        FunctionCall [COUNT] (id:14, children:1)
          Star (id:15, children:0)
        IntegerLiteral [5] (id:16, children:0)
      BinaryExpr [>] (id:21, children:2)
        FunctionCall [AVG] (id:18, children:1)
          Identifier [salary] (id:19, children:0)
        IntegerLiteral [50000] (id:20, children:0)
  OrderByClause (id:25, children:2)
    ColumnRef [department] (id:24, children:0)
    FunctionCall [COUNT] (id:26, children:1)
      Star (id:27, children:0)

[       OK ] ASTVerificationTest.GroupByHavingStructure (0 ms)
[ RUN      ] ASTVerificationTest.CaseExpressionStructure
CASE Expression AST:
SelectStmt (id:1, children:2)
  SelectList (id:19, children:1)
    CaseExpr (id:2, children:4)
      BinaryExpr [WHEN] (id:3, children:2)
        BinaryExpr [<] (id:6, children:2)
          Identifier [age] (id:4, children:0)
          IntegerLiteral [13] (id:5, children:0)
        StringLiteral ['child'] (id:7, children:0)
      BinaryExpr [WHEN] (id:8, children:2)
        BinaryExpr [<] (id:11, children:2)
          Identifier [age] (id:9, children:0)
          IntegerLiteral [20] (id:10, children:0)
        StringLiteral ['teen'] (id:12, children:0)
      BinaryExpr [WHEN] (id:13, children:2)
        BinaryExpr [<] (id:16, children:2)
          Identifier [age] (id:14, children:0)
          IntegerLiteral [65] (id:15, children:0)
        StringLiteral ['adult'] (id:17, children:0)
      StringLiteral ['senior'] (id:18, children:0)
  FromClause (id:21, children:1)
    TableRef [users] (id:20, children:0)

[       OK ] ASTVerificationTest.CaseExpressionStructure (0 ms)
[ RUN      ] ASTVerificationTest.SearchedCaseStructure
Searched CASE AST:
SelectStmt (id:1, children:2)
  SelectList (id:11, children:1)
    CaseExpr (id:2, children:4)
      Identifier [status] (id:3, children:0)
      BinaryExpr [WHEN] (id:4, children:2)
        StringLiteral ['active'] (id:5, children:0)
        IntegerLiteral [1] (id:6, children:0)
      BinaryExpr [WHEN] (id:7, children:2)
        StringLiteral ['inactive'] (id:8, children:0)
        IntegerLiteral [0] (id:9, children:0)
      IntegerLiteral [-1] (id:10, children:0)
  FromClause (id:13, children:1)
    TableRef [users] (id:12, children:0)

[       OK ] ASTVerificationTest.SearchedCaseStructure (0 ms)
[ RUN      ] ASTVerificationTest.BetweenOperatorStructure
[       OK ] ASTVerificationTest.BetweenOperatorStructure (0 ms)
[ RUN      ] ASTVerificationTest.InOperatorStructure
[       OK ] ASTVerificationTest.InOperatorStructure (0 ms)
[ RUN      ] ASTVerificationTest.LikeAndIsNullStructure
[       OK ] ASTVerificationTest.LikeAndIsNullStructure (0 ms)
[ RUN      ] ASTVerificationTest.ComplexQueryComplete

=== COMPLEX QUERY FULL AST ===
SelectStmt (DISTINCT) (id:1, children:7)
  SelectList (id:3, children:4)
    ColumnRef [d.name] (id:2, children:0)
    FunctionCall [COUNT] (id:4, children:1)
      Star (id:5, children:0)
    FunctionCall [AVG] (id:6, children:1)
      ColumnRef [e.salary] (id:7, children:0)
    CaseExpr (id:8, children:3)
      BinaryExpr [WHEN] (id:9, children:2)
        BinaryExpr [>] (id:13, children:2)
          FunctionCall [AVG] (id:10, children:1)
            ColumnRef [e.salary] (id:11, children:0)
          IntegerLiteral [100000] (id:12, children:0)
        StringLiteral ['high'] (id:14, children:0)
      BinaryExpr [WHEN] (id:15, children:2)
        BetweenExpr [BETWEEN] (id:20, children:3)
          FunctionCall [AVG] (id:16, children:1)
            ColumnRef [e.salary] (id:17, children:0)
          IntegerLiteral [50000] (id:18, children:0)
          IntegerLiteral [100000] (id:19, children:0)
        StringLiteral ['medium'] (id:21, children:0)
      StringLiteral ['low'] (id:22, children:0)
  FromClause (id:24, children:3)
    TableRef [departments] (id:23, children:0)
    JoinClause [INNER JOIN] (id:25, children:2)
      TableRef [employees] (id:26, children:0)
      BinaryExpr [=] (id:29, children:2)
        ColumnRef [d.id] (id:27, children:0)
        ColumnRef [e.department_id] (id:28, children:0)
    JoinClause [LEFT JOIN] (id:30, children:2)
      TableRef [managers] (id:31, children:0)
      BinaryExpr [=] (id:34, children:2)
        ColumnRef [d.manager_id] (id:32, children:0)
        ColumnRef [m.id] (id:33, children:0)
  WhereClause (id:49, children:1)
    BinaryExpr [AND] (id:48, children:2)
      BinaryExpr [AND] (id:45, children:2)
        BinaryExpr [AND] (id:41, children:2)
          BinaryExpr [=] (id:37, children:2)
            ColumnRef [e.status] (id:35, children:0)
            StringLiteral ['active'] (id:36, children:0)
          BinaryExpr [>] (id:40, children:2)
            ColumnRef [e.hire_date] (id:38, children:0)
            StringLiteral ['2020-01-01'] (id:39, children:0)
        LikeExpr [LIKE] (id:44, children:2)
          ColumnRef [d.name] (id:42, children:0)
          StringLiteral ['%temp%'] (id:43, children:0)
      IsNullExpr [IS NOT NULL] (id:47, children:1)
        ColumnRef [m.id] (id:46, children:0)
  GroupByClause (id:50, children:2)
    ColumnRef [d.name] (id:51, children:0)
    ColumnRef [d.id] (id:52, children:0)
  HavingClause (id:62, children:1)
    BinaryExpr [AND] (id:61, children:2)
      BinaryExpr [>] (id:56, children:2)
        FunctionCall [COUNT] (id:53, children:1)
          Star (id:54, children:0)
        IntegerLiteral [5] (id:55, children:0)
      BinaryExpr [>] (id:60, children:2)
        FunctionCall [AVG] (id:57, children:1)
          ColumnRef [e.salary] (id:58, children:0)
        IntegerLiteral [40000] (id:59, children:0)
  OrderByClause (id:65, children:2)
    FunctionCall [COUNT] (id:63, children:1)
      Star (id:64, children:0)
    FunctionCall [AVG] (id:66, children:1)
      ColumnRef [e.salary] (id:67, children:0)
  LimitClause (id:68, children:1)
    IntegerLiteral [10] (id:69, children:0)

[       OK ] ASTVerificationTest.ComplexQueryComplete (0 ms)
[ RUN      ] ASTVerificationTest.AggregateFunctionsStructure
[       OK ] ASTVerificationTest.AggregateFunctionsStructure (0 ms)
[ RUN      ] ASTVerificationTest.OperatorPrecedenceStructure
Operator Precedence AST:
WhereClause (id:17, children:1)
  BinaryExpr [OR] (id:16, children:2)
    BinaryExpr [AND] (id:12, children:2)
      BinaryExpr [>] (id:8, children:2)
        ColumnRef [age] (id:6, children:0)
        IntegerLiteral [18] (id:7, children:0)
      BinaryExpr [=] (id:11, children:2)
        ColumnRef [status] (id:9, children:0)
        StringLiteral ['active'] (id:10, children:0)
    BinaryExpr [=] (id:15, children:2)
      ColumnRef [role] (id:13, children:0)
      StringLiteral ['admin'] (id:14, children:0)

[       OK ] ASTVerificationTest.OperatorPrecedenceStructure (0 ms)
[ RUN      ] ASTVerificationTest.PartialQueryStructure
[       OK ] ASTVerificationTest.PartialQueryStructure (0 ms)
[ RUN      ] ASTVerificationTest.ChildCountAccuracy
[       OK ] ASTVerificationTest.ChildCountAccuracy (0 ms)
[----------] 14 tests from ASTVerificationTest (0 ms total)

[----------] Global test environment tear-down
[==========] 14 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 14 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_ast_verification" end time: Aug 30 12:39 PDT
"test_ast_verification" time elapsed: 00:00:00
----------------------------------------------------------

12/28 Testing: test_parser_fixes
12/28 Test: test_parser_fixes
Command: "/Users/chiradip/codes/DB25-parser2/build/test_parser_fixes"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_parser_fixes" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 15 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 15 tests from ParserFixesTest
[ RUN      ] ParserFixesTest.SelectColumnAlias
[       OK ] ParserFixesTest.SelectColumnAlias (0 ms)
[ RUN      ] ParserFixesTest.TableAlias
[       OK ] ParserFixesTest.TableAlias (0 ms)
[ RUN      ] ParserFixesTest.FunctionAlias
[       OK ] ParserFixesTest.FunctionAlias (0 ms)
[ RUN      ] ParserFixesTest.CountDistinct
[       OK ] ParserFixesTest.CountDistinct (0 ms)
[ RUN      ] ParserFixesTest.CountDistinctQualified
[       OK ] ParserFixesTest.CountDistinctQualified (0 ms)
[ RUN      ] ParserFixesTest.OrderByFunctionWithLimit
[       OK ] ParserFixesTest.OrderByFunctionWithLimit (0 ms)
[ RUN      ] ParserFixesTest.OrderByComplexFunction
[       OK ] ParserFixesTest.OrderByComplexFunction (0 ms)
[ RUN      ] ParserFixesTest.OrderByDesc
[       OK ] ParserFixesTest.OrderByDesc (0 ms)
[ RUN      ] ParserFixesTest.OrderByAsc
[       OK ] ParserFixesTest.OrderByAsc (0 ms)
[ RUN      ] ParserFixesTest.OrderByFunctionDesc
[       OK ] ParserFixesTest.OrderByFunctionDesc (0 ms)
[ RUN      ] ParserFixesTest.NotLike
[       OK ] ParserFixesTest.NotLike (0 ms)
[ RUN      ] ParserFixesTest.NotIn
[       OK ] ParserFixesTest.NotIn (0 ms)
[ RUN      ] ParserFixesTest.NotBetween
[       OK ] ParserFixesTest.NotBetween (0 ms)
[ RUN      ] ParserFixesTest.IsNotNull
[       OK ] ParserFixesTest.IsNotNull (0 ms)
[ RUN      ] ParserFixesTest.ComplexQueryWithAllFeatures
[       OK ] ParserFixesTest.ComplexQueryWithAllFeatures (0 ms)
[----------] 15 tests from ParserFixesTest (0 ms total)

[----------] Global test environment tear-down
[==========] 15 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 15 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_parser_fixes" end time: Aug 30 12:39 PDT
"test_parser_fixes" time elapsed: 00:00:00
----------------------------------------------------------

13/28 Testing: test_subqueries
13/28 Test: test_subqueries
Command: "/Users/chiradip/codes/DB25-parser2/build/test_subqueries"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_subqueries" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
[==========] Running 11 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 11 tests from SubqueryTest
[ RUN      ] SubqueryTest.SimpleSubqueryInWhere
[       OK ] SubqueryTest.SimpleSubqueryInWhere (0 ms)
[ RUN      ] SubqueryTest.ExistsSubquery
[       OK ] SubqueryTest.ExistsSubquery (0 ms)
[ RUN      ] SubqueryTest.NotExistsSubquery
[       OK ] SubqueryTest.NotExistsSubquery (0 ms)
[ RUN      ] SubqueryTest.ScalarSubqueryInSelect
[       OK ] SubqueryTest.ScalarSubqueryInSelect (0 ms)
[ RUN      ] SubqueryTest.ScalarSubqueryComparison
[       OK ] SubqueryTest.ScalarSubqueryComparison (0 ms)
[ RUN      ] SubqueryTest.SubqueryInFrom
[       OK ] SubqueryTest.SubqueryInFrom (0 ms)
[ RUN      ] SubqueryTest.SubqueryWithJoin
[       OK ] SubqueryTest.SubqueryWithJoin (0 ms)
[ RUN      ] SubqueryTest.NestedSubqueries
[       OK ] SubqueryTest.NestedSubqueries (0 ms)
[ RUN      ] SubqueryTest.AnyOperator
[       OK ] SubqueryTest.AnyOperator (0 ms)
[ RUN      ] SubqueryTest.AllOperator
[       OK ] SubqueryTest.AllOperator (0 ms)
[ RUN      ] SubqueryTest.CorrelatedSubquery
[       OK ] SubqueryTest.CorrelatedSubquery (0 ms)
[----------] 11 tests from SubqueryTest (0 ms total)

[----------] Global test environment tear-down
[==========] 11 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 11 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_subqueries" end time: Aug 30 12:39 PDT
"test_subqueries" time elapsed: 00:00:00
----------------------------------------------------------

14/28 Testing: test_cte
14/28 Test: test_cte
Command: "/Users/chiradip/codes/DB25-parser2/build/test_cte"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_cte" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
[==========] Running 6 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 6 tests from CTETest
[ RUN      ] CTETest.SimpleCTE
[       OK ] CTETest.SimpleCTE (0 ms)
[ RUN      ] CTETest.CTEWithColumns
[       OK ] CTETest.CTEWithColumns (0 ms)
[ RUN      ] CTETest.MultipleCTEs
[       OK ] CTETest.MultipleCTEs (0 ms)
[ RUN      ] CTETest.RecursiveCTE
[       OK ] CTETest.RecursiveCTE (0 ms)
[ RUN      ] CTETest.NestedCTEReference
[       OK ] CTETest.NestedCTEReference (0 ms)
[ RUN      ] CTETest.CTEWithSubquery
[       OK ] CTETest.CTEWithSubquery (0 ms)
[----------] 6 tests from CTETest (0 ms total)

[----------] Global test environment tear-down
[==========] 6 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 6 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_cte" end time: Aug 30 12:39 PDT
"test_cte" time elapsed: 00:00:00
----------------------------------------------------------

15/28 Testing: test_edge_cases
15/28 Test: test_edge_cases
Command: "/Users/chiradip/codes/DB25-parser2/build/test_edge_cases"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_edge_cases" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
================================================================================
                    DB25 SQL Parser - Edge Cases Test                          
================================================================================

Test: Empty SELECT list
SQL: SELECT FROM users
Expected: FAIL
Result: FAILED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Multiple wildcards
SQL: SELECT *, * FROM users
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Nested parentheses
SQL: SELECT ((1 + 2) * 3) FROM dual
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Deep nesting
SQL: SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM users)))
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Multiple JOINs
SQL: SELECT * FROM t1 JOIN t2 ON t1.id = t2.id JOIN t3 ON t2.id = t3.id JOIN t4 ON t3.id = t4.id
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Complex WHERE
SQL: SELECT * FROM users WHERE (age > 18 AND age < 65) OR (status = 'special' AND NOT deleted)
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Multiple GROUP BY
SQL: SELECT dept, team, COUNT(*) FROM employees GROUP BY dept, team
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Chained set operations
SQL: SELECT id FROM t1 UNION SELECT id FROM t2 INTERSECT SELECT id FROM t3
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Mixed case keywords
SQL: SeLeCt * FrOm UsErS wHeRe AcTiVe = TrUe
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Quoted identifiers
SQL: SELECT "user name", 'string literal' FROM users
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Numeric expressions
SQL: SELECT 1 + 2 * 3 - 4 / 2, 10 % 3 FROM dual
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Boolean expressions
SQL: SELECT * FROM users WHERE active = true AND verified = false
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: NULL handling
SQL: SELECT * FROM users WHERE email IS NULL OR email IS NOT NULL
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Complex CASE
SQL: SELECT CASE WHEN a > b THEN c WHEN d < e THEN f ELSE g END FROM table
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Nested functions
SQL: SELECT UPPER(TRIM(LOWER(name))) FROM users
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Subquery in SELECT
SQL: SELECT id, (SELECT MAX(price) FROM products) as max_price FROM categories
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Correlated subquery
SQL: SELECT * FROM t1 WHERE EXISTS (SELECT 1 FROM t2 WHERE t2.id = t1.id)
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: ALL/ANY operators
SQL: SELECT * FROM products WHERE price > ALL (SELECT price FROM discounted)
Expected: PASS
Result: PASSED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Missing FROM
SQL: SELECT * WHERE id = 1
Expected: FAIL
Result: FAILED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Invalid JOIN
SQL: SELECT * FROM t1 JOIN ON t1.id = t2.id
Expected: FAIL
Result: FAILED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Unclosed parenthesis
SQL: SELECT * FROM (SELECT * FROM users
Expected: FAIL
Result: FAILED ✓ (Correct)
--------------------------------------------------------------------------------
Test: Invalid operator
SQL: SELECT * FROM users WHERE id === 1
Expected: FAIL
Result: FAILED ✓ (Correct)
--------------------------------------------------------------------------------

================================================================================
                                EDGE CASES SUMMARY                             
================================================================================
Total Tests: 22
Correctly Handled: 22 (100%)
Incorrectly Handled: 0

================================================================================
                               STRESS TEST                                     
================================================================================
Testing with 100 columns in SELECT list...
✓ Successfully parsed query with 100 columns
  Memory used: 25734 bytes
  Nodes created: 102
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_edge_cases" end time: Aug 30 12:39 PDT
"test_edge_cases" time elapsed: 00:00:00
----------------------------------------------------------

16/28 Testing: test_performance
16/28 Test: test_performance
Command: "/Users/chiradip/codes/DB25-parser2/build/test_performance"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_performance" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
================================================================================
                    DB25 SQL Parser - Performance Analysis                     
================================================================================

Test: Simple SELECT
SQL Length: 19 chars
Iterations: 10000
Results:
  Average Time: 0.40 μs per parse
  Throughput: 47381546 chars/second
  Memory Used: 768 bytes
  AST Nodes: 5
  Bytes/Node: 153
--------------------------------------------------------------------------------
Test: Complex JOIN
SQL Length: 225 chars
Iterations: 5000
Results:
  Average Time: 4.08 μs per parse
  Throughput: 55168694 chars/second
  Memory Used: 6532 bytes
  AST Nodes: 31
  Bytes/Node: 210
--------------------------------------------------------------------------------
Test: Subquery
SQL Length: 88 chars
Iterations: 5000
Results:
  Average Time: 1.30 μs per parse
  Throughput: 67443286 chars/second
  Memory Used: 3072 bytes
  AST Nodes: 18
  Bytes/Node: 170
--------------------------------------------------------------------------------
Test: CTE Query
SQL Length: 111 chars
Iterations: 5000
Results:
  Average Time: 1.46 μs per parse
  Throughput: 76163030 chars/second
  Memory Used: 3456 bytes
  AST Nodes: 20
  Bytes/Node: 172
--------------------------------------------------------------------------------
Test: Complex Expression
SQL Length: 177 chars
Iterations: 5000
Results:
  Average Time: 2.29 μs per parse
  Throughput: 77137627 chars/second
  Memory Used: 5504 bytes
  AST Nodes: 26
  Bytes/Node: 211
--------------------------------------------------------------------------------

Stress Test: Deeply Nested Query
  Parse Time: 2 μs
  Memory Used: 3328 bytes
  AST Nodes: 25

================================================================================
Summary:
  Parser can handle 10,000+ parses/second for typical queries
  Memory usage is consistently low (<5KB for most queries)
  Arena allocator provides predictable performance
================================================================================
<end of output>
Test time =   0.05 sec
----------------------------------------------------------
Test Passed.
"test_performance" end time: Aug 30 12:39 PDT
"test_performance" time elapsed: 00:00:00
----------------------------------------------------------

17/28 Testing: test_window_functions
17/28 Test: test_window_functions
Command: "/Users/chiradip/codes/DB25-parser2/build/test_window_functions"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_window_functions" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 31 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 31 tests from WindowFunctionTest
[ RUN      ] WindowFunctionTest.RowNumberBasic
[       OK ] WindowFunctionTest.RowNumberBasic (0 ms)
[ RUN      ] WindowFunctionTest.RowNumberWithOrder
[       OK ] WindowFunctionTest.RowNumberWithOrder (0 ms)
[ RUN      ] WindowFunctionTest.RowNumberWithPartition
[       OK ] WindowFunctionTest.RowNumberWithPartition (0 ms)
[ RUN      ] WindowFunctionTest.RankFunction
[       OK ] WindowFunctionTest.RankFunction (0 ms)
[ RUN      ] WindowFunctionTest.DenseRankFunction
[       OK ] WindowFunctionTest.DenseRankFunction (0 ms)
[ RUN      ] WindowFunctionTest.MultipleWindowFunctions
[       OK ] WindowFunctionTest.MultipleWindowFunctions (0 ms)
[ RUN      ] WindowFunctionTest.SumWindow
[       OK ] WindowFunctionTest.SumWindow (0 ms)
[ RUN      ] WindowFunctionTest.AvgWindow
[       OK ] WindowFunctionTest.AvgWindow (0 ms)
[ RUN      ] WindowFunctionTest.CountWindow
[       OK ] WindowFunctionTest.CountWindow (0 ms)
[ RUN      ] WindowFunctionTest.RowsBetweenUnboundedPreceding
[       OK ] WindowFunctionTest.RowsBetweenUnboundedPreceding (0 ms)
[ RUN      ] WindowFunctionTest.RowsBetweenNPreceding
[       OK ] WindowFunctionTest.RowsBetweenNPreceding (0 ms)
[ RUN      ] WindowFunctionTest.RangeBetween
[       OK ] WindowFunctionTest.RangeBetween (0 ms)
[ RUN      ] WindowFunctionTest.RowsBetweenCurrentAndFollowing
[       OK ] WindowFunctionTest.RowsBetweenCurrentAndFollowing (0 ms)
[ RUN      ] WindowFunctionTest.RowsBetweenUnboundedFollowing
[       OK ] WindowFunctionTest.RowsBetweenUnboundedFollowing (0 ms)
[ RUN      ] WindowFunctionTest.MultiplePartitionColumns
[       OK ] WindowFunctionTest.MultiplePartitionColumns (0 ms)
[ RUN      ] WindowFunctionTest.PartitionWithExpressions
[       OK ] WindowFunctionTest.PartitionWithExpressions (0 ms)
[ RUN      ] WindowFunctionTest.LeadFunction
[       OK ] WindowFunctionTest.LeadFunction (0 ms)
[ RUN      ] WindowFunctionTest.LagFunction
[       OK ] WindowFunctionTest.LagFunction (0 ms)
[ RUN      ] WindowFunctionTest.FirstValueFunction
[       OK ] WindowFunctionTest.FirstValueFunction (0 ms)
[ RUN      ] WindowFunctionTest.LastValueFunction
[       OK ] WindowFunctionTest.LastValueFunction (0 ms)
[ RUN      ] WindowFunctionTest.NthValueFunction
[       OK ] WindowFunctionTest.NthValueFunction (0 ms)
[ RUN      ] WindowFunctionTest.PercentileRank
[       OK ] WindowFunctionTest.PercentileRank (0 ms)
[ RUN      ] WindowFunctionTest.CumeDistFunction
[       OK ] WindowFunctionTest.CumeDistFunction (0 ms)
[ RUN      ] WindowFunctionTest.NtileFunction
[       OK ] WindowFunctionTest.NtileFunction (0 ms)
[ RUN      ] WindowFunctionTest.ComplexAnalyticsQuery
[       OK ] WindowFunctionTest.ComplexAnalyticsQuery (0 ms)
[ RUN      ] WindowFunctionTest.WindowFunctionInSubquery
[       OK ] WindowFunctionTest.WindowFunctionInSubquery (0 ms)
[ RUN      ] WindowFunctionTest.WindowFunctionWithCTE
[       OK ] WindowFunctionTest.WindowFunctionWithCTE (0 ms)
[ RUN      ] WindowFunctionTest.EmptyOverClause
[       OK ] WindowFunctionTest.EmptyOverClause (0 ms)
[ RUN      ] WindowFunctionTest.WindowFunctionWithDistinct
[       OK ] WindowFunctionTest.WindowFunctionWithDistinct (0 ms)
[ RUN      ] WindowFunctionTest.MultipleWindowSpecifications
[       OK ] WindowFunctionTest.MultipleWindowSpecifications (0 ms)
[ RUN      ] WindowFunctionTest.VerifyASTStructure
[       OK ] WindowFunctionTest.VerifyASTStructure (0 ms)
[----------] 31 tests from WindowFunctionTest (0 ms total)

[----------] Global test environment tear-down
[==========] 31 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 31 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_window_functions" end time: Aug 30 12:39 PDT
"test_window_functions" time elapsed: 00:00:00
----------------------------------------------------------

18/28 Testing: test_parser_fixes_phase1
18/28 Test: test_parser_fixes_phase1
Command: "/Users/chiradip/codes/DB25-parser2/build/test_parser_fixes_phase1"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_parser_fixes_phase1" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 8 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 8 tests from ParserFixesPhase1Test
[ RUN      ] ParserFixesPhase1Test.NotExistsVsExists
[       OK ] ParserFixesPhase1Test.NotExistsVsExists (0 ms)
[ RUN      ] ParserFixesPhase1Test.NotInVsIn
[       OK ] ParserFixesPhase1Test.NotInVsIn (0 ms)
[ RUN      ] ParserFixesPhase1Test.CountDistinct
[       OK ] ParserFixesPhase1Test.CountDistinct (0 ms)
[ RUN      ] ParserFixesPhase1Test.UnionAllVsUnion
[       OK ] ParserFixesPhase1Test.UnionAllVsUnion (0 ms)
[ RUN      ] ParserFixesPhase1Test.OrderByDirection
[       OK ] ParserFixesPhase1Test.OrderByDirection (0 ms)
[ RUN      ] ParserFixesPhase1Test.WindowFrameBoundaries
[       OK ] ParserFixesPhase1Test.WindowFrameBoundaries (0 ms)
[ RUN      ] ParserFixesPhase1Test.TableAliases
[       OK ] ParserFixesPhase1Test.TableAliases (0 ms)
[ RUN      ] ParserFixesPhase1Test.ColumnVsIdentifier
[       OK ] ParserFixesPhase1Test.ColumnVsIdentifier (0 ms)
[----------] 8 tests from ParserFixesPhase1Test (0 ms total)

[----------] Global test environment tear-down
[==========] 8 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 8 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_parser_fixes_phase1" end time: Aug 30 12:39 PDT
"test_parser_fixes_phase1" time elapsed: 00:00:00
----------------------------------------------------------

19/28 Testing: test_parser_fixes_phase2
19/28 Test: test_parser_fixes_phase2
Command: "/Users/chiradip/codes/DB25-parser2/build/test_parser_fixes_phase2"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_parser_fixes_phase2" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Running main() from /Users/chiradip/codes/DB25-parser2/build/_deps/googletest-src/googletest/src/gtest_main.cc
[==========] Running 7 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 7 tests from ParserFixesPhase2Test
[ RUN      ] ParserFixesPhase2Test.OrderByDirection
[       OK ] ParserFixesPhase2Test.OrderByDirection (0 ms)
[ RUN      ] ParserFixesPhase2Test.WindowFrameBoundaries
[       OK ] ParserFixesPhase2Test.WindowFrameBoundaries (0 ms)
[ RUN      ] ParserFixesPhase2Test.UnboundedFrameBoundaries
[       OK ] ParserFixesPhase2Test.UnboundedFrameBoundaries (0 ms)
[ RUN      ] ParserFixesPhase2Test.SelectListAliases
[       OK ] ParserFixesPhase2Test.SelectListAliases (0 ms)
[ RUN      ] ParserFixesPhase2Test.TableAliases
[       OK ] ParserFixesPhase2Test.TableAliases (0 ms)
[ RUN      ] ParserFixesPhase2Test.NullsOrdering
[       OK ] ParserFixesPhase2Test.NullsOrdering (0 ms)
[ RUN      ] ParserFixesPhase2Test.MixedFrameTypes
[       OK ] ParserFixesPhase2Test.MixedFrameTypes (0 ms)
[----------] 7 tests from ParserFixesPhase2Test (0 ms total)

[----------] Global test environment tear-down
[==========] 7 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 7 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_parser_fixes_phase2" end time: Aug 30 12:39 PDT
"test_parser_fixes_phase2" time elapsed: 00:00:00
----------------------------------------------------------

20/28 Testing: test_ddl_statements
20/28 Test: test_ddl_statements
Command: "/Users/chiradip/codes/DB25-parser2/build/test_ddl_statements"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_ddl_statements" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
[==========] Running 22 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 22 tests from DDLTest
[ RUN      ] DDLTest.CreateIndex
[       OK ] DDLTest.CreateIndex (0 ms)
[ RUN      ] DDLTest.CreateUniqueIndex
[       OK ] DDLTest.CreateUniqueIndex (0 ms)
[ RUN      ] DDLTest.CreateIndexIfNotExists
[       OK ] DDLTest.CreateIndexIfNotExists (0 ms)
[ RUN      ] DDLTest.CreateIndexWithWhere
[       OK ] DDLTest.CreateIndexWithWhere (0 ms)
[ RUN      ] DDLTest.CreateView
[       OK ] DDLTest.CreateView (0 ms)
[ RUN      ] DDLTest.CreateOrReplaceView
[       OK ] DDLTest.CreateOrReplaceView (0 ms)
[ RUN      ] DDLTest.CreateViewWithColumns
[       OK ] DDLTest.CreateViewWithColumns (0 ms)
[ RUN      ] DDLTest.DropTable
[       OK ] DDLTest.DropTable (0 ms)
[ RUN      ] DDLTest.DropTableIfExists
[       OK ] DDLTest.DropTableIfExists (0 ms)
[ RUN      ] DDLTest.DropTableCascade
[       OK ] DDLTest.DropTableCascade (0 ms)
[ RUN      ] DDLTest.DropIndex
[       OK ] DDLTest.DropIndex (0 ms)
[ RUN      ] DDLTest.DropView
[       OK ] DDLTest.DropView (0 ms)
[ RUN      ] DDLTest.AlterTableAddColumn
[       OK ] DDLTest.AlterTableAddColumn (0 ms)
[ RUN      ] DDLTest.AlterTableDropColumn
[       OK ] DDLTest.AlterTableDropColumn (0 ms)
[ RUN      ] DDLTest.AlterTableRename
[       OK ] DDLTest.AlterTableRename (0 ms)
[ RUN      ] DDLTest.AlterTableRenameColumn
[       OK ] DDLTest.AlterTableRenameColumn (0 ms)
[ RUN      ] DDLTest.AlterTableAlterColumn
[       OK ] DDLTest.AlterTableAlterColumn (0 ms)
[ RUN      ] DDLTest.TruncateTable
[       OK ] DDLTest.TruncateTable (0 ms)
[ RUN      ] DDLTest.TruncateTableNoKeyword
[       OK ] DDLTest.TruncateTableNoKeyword (0 ms)
[ RUN      ] DDLTest.TruncateTableCascade
[       OK ] DDLTest.TruncateTableCascade (0 ms)
[ RUN      ] DDLTest.CreateTableStillWorks
[       OK ] DDLTest.CreateTableStillWorks (0 ms)
[ RUN      ] DDLTest.CreateTableIfNotExists
[       OK ] DDLTest.CreateTableIfNotExists (0 ms)
[----------] 22 tests from DDLTest (0 ms total)

[----------] Global test environment tear-down
[==========] 22 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 22 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_ddl_statements" end time: Aug 30 12:39 PDT
"test_ddl_statements" time elapsed: 00:00:00
----------------------------------------------------------

21/28 Testing: test_sql_completion
21/28 Test: test_sql_completion
Command: "/Users/chiradip/codes/DB25-parser2/build/test_sql_completion"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_sql_completion" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
Failed to open test file: tests/comprehensive_sql_tests.sql
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_sql_completion" end time: Aug 30 12:39 PDT
"test_sql_completion" time elapsed: 00:00:00
----------------------------------------------------------

22/28 Testing: test_ast_comprehensive
22/28 Test: test_ast_comprehensive
Command: "/Users/chiradip/codes/DB25-parser2/build/test_ast_comprehensive"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_ast_comprehensive" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
DB25 Parser - Comprehensive AST Improvements Demonstration
=========================================================

=== 1. NOT EXISTS semantic distinction ===
SQL: SELECT * FROM t WHERE NOT EXISTS (SELECT 1 FROM t2)

AST:
- SELECT
  - NODE[57]
    - NODE[88]
  - NODE[58]
    - TABLE 't'
  - NODE[60]
    - NODE[45] 'EXISTS' [NOT]
      - NODE[91]
        - SELECT
          - NODE[57]
            - NODE[75] '1'
          - NODE[58]
            - TABLE 't2'
✓ Parse successful

=== 2. Plain EXISTS (no NOT) ===
SQL: SELECT * FROM t WHERE EXISTS (SELECT 1 FROM t2)

AST:
- SELECT
  - NODE[57]
    - NODE[88]
  - NODE[58]
    - TABLE 't'
  - NODE[60]
    - NODE[45] 'EXISTS'
      - NODE[91]
        - SELECT
          - NODE[57]
            - NODE[75] '1'
          - NODE[58]
            - TABLE 't2'
✓ Parse successful

=== 3. NOT IN semantic distinction ===
SQL: SELECT * FROM products WHERE id NOT IN (1, 2, 3)

AST:
- SELECT
  - NODE[57]
    - NODE[88]
  - NODE[58]
    - TABLE 'products'
  - NODE[60]
    - IN 'NOT IN' [NOT]
      - COLUMN 'id'
      - NODE[75] '1'
      - NODE[75] '2'
      - NODE[75] '3'
✓ Parse successful

=== 4. Plain IN (no NOT) ===
SQL: SELECT * FROM products WHERE id IN (1, 2, 3)

AST:
- SELECT
  - NODE[57]
    - NODE[88]
  - NODE[58]
    - TABLE 'products'
  - NODE[60]
    - IN 'IN'
      - COLUMN 'id'
      - NODE[75] '1'
      - NODE[75] '2'
      - NODE[75] '3'
✓ Parse successful

=== 5. COUNT(DISTINCT) flag preservation ===
SQL: SELECT COUNT(DISTINCT customer_id), COUNT(*), COUNT(id) FROM orders

AST:
- SELECT
  - NODE[57]
    - FUNCTION 'COUNT' [DISTINCT]
      - ID 'customer_id'
    - FUNCTION 'COUNT'
      - NODE[88]
    - FUNCTION 'COUNT'
      - ID 'id'
  - NODE[58]
    - TABLE 'orders'
✓ Parse successful

=== 6. UNION ALL flag ===
SQL: SELECT id FROM t1 UNION ALL SELECT id FROM t2

AST:
- UNION 'UNION' [ALL]
  - SELECT
    - NODE[57]
      - COLUMN 'id'
    - NODE[58]
      - TABLE 't1'
  - SELECT
    - NODE[57]
      - COLUMN 'id'
    - NODE[58]
      - TABLE 't2'
✓ Parse successful

=== 7. UNION (distinct) ===
SQL: SELECT id FROM t1 UNION SELECT id FROM t2

AST:
- UNION 'UNION'
  - SELECT
    - NODE[57]
      - COLUMN 'id'
    - NODE[58]
      - TABLE 't1'
  - SELECT
    - NODE[57]
      - COLUMN 'id'
    - NODE[58]
      - TABLE 't2'
✓ Parse successful

=== 8. Column references (not identifiers) ===
SQL: SELECT name, age, salary FROM employees WHERE dept_id = 10

AST:
- SELECT
  - NODE[57]
    - COLUMN 'name'
    - COLUMN 'age'
    - COLUMN 'salary'
  - NODE[58]
    - TABLE 'employees'
  - NODE[60]
    - NODE[44] '='
      - COLUMN 'dept_id'
      - NODE[75] '10'
✓ Parse successful

=== 9. ORDER BY with ASC/DESC ===
SQL: SELECT * FROM employees ORDER BY salary DESC, name ASC, dept

AST:
- SELECT
  - NODE[57]
    - NODE[88]
  - NODE[58]
    - TABLE 'employees'
  - ORDER_BY [ASC]
    - COLUMN 'salary' [DESC]
    - COLUMN 'name' [ASC]
    - COLUMN 'dept' [ASC]
✓ Parse successful

=== 10. Window frame PRECEDING/FOLLOWING ===
SQL: SELECT 
            SUM(amount) OVER (ORDER BY date ROWS BETWEEN 3 PRECEDING AND CURRENT ROW),
            AVG(amount) OVER (ORDER BY date ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)
        FROM sales

AST:
- SELECT
  - NODE[57]
    - FUNCTION 'SUM'
      - ID 'amount'
      - WINDOW
        - ORDER_BY [ASC]
          - COLUMN 'date' [ASC]
        - FRAME 'ROWS'
          - FRAME_BOUND '3' AS 'PRECEDING' PRECEDING
          - FRAME_BOUND 'CURRENT ROW'
    - FUNCTION 'AVG'
      - ID 'amount'
      - WINDOW
        - ORDER_BY [ASC]
          - COLUMN 'date' [ASC]
        - FRAME 'ROWS'
          - FRAME_BOUND 'CURRENT ROW'
          - FRAME_BOUND '2' AS 'FOLLOWING' FOLLOWING
  - NODE[58]
    - TABLE 'sales'
✓ Parse successful

=== 11. Aliases in SELECT and FROM ===
SQL: SELECT 
            e.id AS employee_id,
            e.name full_name,
            d.name AS department
        FROM employees e
        JOIN departments d ON e.dept_id = d.id

AST:
- SELECT
  - NODE[57]
    - COLUMN 'e.id' AS 'employee_id'
    - COLUMN 'e.name' AS 'full_name'
    - COLUMN 'd.name' AS 'department'
  - NODE[58]
    - TABLE 'employees' AS 'e'
    - NODE[59] 'JOIN'
      - TABLE 'departments' AS 'd'
      - NODE[44] '='
        - COLUMN 'e.dept_id'
        - COLUMN 'd.id'
✓ Parse successful

=== 12. Complex query with multiple improvements ===
SQL: WITH RECURSIVE cte AS (
            SELECT id, parent_id FROM tree WHERE parent_id IS NULL
            UNION ALL
            SELECT t.id, t.parent_id FROM tree t JOIN cte ON t.parent_id = cte.id
        )
        SELECT 
            COUNT(DISTINCT id) AS unique_nodes,
            MAX(id) max_id
        FROM cte
        WHERE NOT EXISTS (
            SELECT 1 FROM deleted WHERE deleted.id = cte.id
        )
        ORDER BY unique_nodes DESC

AST:
- SELECT
  - NODE[92]
    - NODE[93] 'cte'
      - UNION 'UNION' [ALL]
        - SELECT
          - NODE[57]
            - COLUMN 'id'
            - COLUMN 'parent_id'
          - NODE[58]
            - TABLE 'tree'
          - NODE[60]
            - NODE[55] 'IS NULL'
              - COLUMN 'parent_id'
        - SELECT
          - NODE[57]
            - COLUMN 't.id'
            - COLUMN 't.parent_id'
          - NODE[58]
            - TABLE 'tree' AS 't'
            - NODE[59] 'JOIN'
              - TABLE 'cte'
              - NODE[44] '='
                - COLUMN 't.parent_id'
                - COLUMN 'cte.id'
  - NODE[57]
    - FUNCTION 'COUNT' AS 'unique_nodes' [DISTINCT]
      - ID 'id'
    - FUNCTION 'MAX' AS 'max_id'
      - ID 'id'
  - NODE[58]
    - TABLE 'cte'
  - NODE[60]
    - NODE[45] 'EXISTS' [NOT]
      - NODE[91]
        - SELECT
          - NODE[57]
            - NODE[75] '1'
          - NODE[58]
            - TABLE 'deleted'
          - NODE[60]
            - NODE[44] '='
              - COLUMN 'deleted.id'
              - COLUMN 'cte.id'
  - ORDER_BY [ASC]
    - COLUMN 'unique_nodes' [DESC]
✓ Parse successful

=== Summary ===
All AST improvements have been demonstrated:
✓ NOT EXISTS/IN semantic flags
✓ DISTINCT flag for aggregates
✓ UNION ALL flag
✓ Column vs Identifier distinction
✓ ORDER BY direction (ASC/DESC)
✓ Window frame boundaries (PRECEDING/FOLLOWING)
✓ Alias handling with HasAlias flag
✓ RECURSIVE flag for CTEs
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_ast_comprehensive" end time: Aug 30 12:39 PDT
"test_ast_comprehensive" time elapsed: 00:00:00
----------------------------------------------------------

23/28 Testing: test_advanced_types
23/28 Test: test_advanced_types
Command: "/Users/chiradip/codes/DB25-parser2/build/test_advanced_types"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_advanced_types" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
[==========] Running 19 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 19 tests from AdvancedTypesTest
[ RUN      ] AdvancedTypesTest.IntervalColumnType
[       OK ] AdvancedTypesTest.IntervalColumnType (0 ms)
[ RUN      ] AdvancedTypesTest.IntervalArrayType
[       OK ] AdvancedTypesTest.IntervalArrayType (0 ms)
[ RUN      ] AdvancedTypesTest.IntervalLiteral
/Users/chiradip/codes/DB25-parser2/tests/test_advanced_types.cpp:77: Failure
Expected: (find_node_type(ast, NodeType::StringLiteral)) != (nullptr), actual: NULL vs (nullptr)
INTERVAL literal parsed as string (current behavior)
[  FAILED  ] AdvancedTypesTest.IntervalLiteral (0 ms)
[ RUN      ] AdvancedTypesTest.IntervalInExpression
[       OK ] AdvancedTypesTest.IntervalInExpression (0 ms)
[ RUN      ] AdvancedTypesTest.IntervalInWindowFrame
[       OK ] AdvancedTypesTest.IntervalInWindowFrame (0 ms)
[ RUN      ] AdvancedTypesTest.ArrayColumnType
/Users/chiradip/codes/DB25-parser2/tests/test_advanced_types.cpp:112: Failure
Value of: contains_text(ast, "TEXT[]") || contains_text(ast, "[]")
  Actual: false
Expected: true
Should contain array notation in AST
[  FAILED  ] AdvancedTypesTest.ArrayColumnType (0 ms)
[ RUN      ] AdvancedTypesTest.IntegerArrayType
[       OK ] AdvancedTypesTest.IntegerArrayType (0 ms)
[ RUN      ] AdvancedTypesTest.MultiDimArray
[       OK ] AdvancedTypesTest.MultiDimArray (0 ms)
[ RUN      ] AdvancedTypesTest.ArrayConstructor
[       OK ] AdvancedTypesTest.ArrayConstructor (0 ms)
[ RUN      ] AdvancedTypesTest.ArrayInANY
/Users/chiradip/codes/DB25-parser2/tests/test_advanced_types.cpp:141: Failure
Value of: result.has_value()
  Actual: false
Expected: true
Should parse ARRAY with ANY
[  FAILED  ] AdvancedTypesTest.ArrayInANY (0 ms)
[ RUN      ] AdvancedTypesTest.RowConstructor
[       OK ] AdvancedTypesTest.RowConstructor (0 ms)
[ RUN      ] AdvancedTypesTest.RowComparison
/Users/chiradip/codes/DB25-parser2/tests/test_advanced_types.cpp:163: Failure
Value of: result.has_value()
  Actual: false
Expected: true
Should parse ROW comparison
[  FAILED  ] AdvancedTypesTest.RowComparison (0 ms)
[ RUN      ] AdvancedTypesTest.JsonArrowOperator
[       OK ] AdvancedTypesTest.JsonArrowOperator (0 ms)
[ RUN      ] AdvancedTypesTest.JsonDoubleArrowOperator
[       OK ] AdvancedTypesTest.JsonDoubleArrowOperator (0 ms)
[ RUN      ] AdvancedTypesTest.JsonPathOperator
[       OK ] AdvancedTypesTest.JsonPathOperator (0 ms)
[ RUN      ] AdvancedTypesTest.JsonContainsOperator
[       OK ] AdvancedTypesTest.JsonContainsOperator (0 ms)
[ RUN      ] AdvancedTypesTest.CastToInterval
[       OK ] AdvancedTypesTest.CastToInterval (0 ms)
[ RUN      ] AdvancedTypesTest.ArrayOfInterval
[       OK ] AdvancedTypesTest.ArrayOfInterval (0 ms)
[ RUN      ] AdvancedTypesTest.TypeSupportSummary

=== Advanced Type Support Summary ===
DDL Context: 3/3 (100%)
Expression Context: 5/5 (100%)
[       OK ] AdvancedTypesTest.TypeSupportSummary (0 ms)
[----------] 19 tests from AdvancedTypesTest (0 ms total)

[----------] Global test environment tear-down
[==========] 19 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 15 tests.
[  FAILED  ] 4 tests, listed below:
[  FAILED  ] AdvancedTypesTest.IntervalLiteral
[  FAILED  ] AdvancedTypesTest.ArrayColumnType
[  FAILED  ] AdvancedTypesTest.ArrayInANY
[  FAILED  ] AdvancedTypesTest.RowComparison

 4 FAILED TESTS
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Failed.
"test_advanced_types" end time: Aug 30 12:39 PDT
"test_advanced_types" time elapsed: 00:00:00
----------------------------------------------------------

24/28 Testing: test_parser_violations
24/28 Test: test_parser_violations
Command: "/Users/chiradip/codes/DB25-parser2/build/test_parser_violations"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_parser_violations" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
DB25 Parser - Code Violation Check
===================================

=== PARSER CODE VIOLATION REPORT ===
Total violations found: 328

Violations by type:
  DUPLICATION: 7
  NULL_CHECK: 279
  STRING_COMPARE: 29
  TODO: 13

Sample violations:
  [NULL_CHECK] ../src/parser/parser.cpp:89 - Potential missing null check
  [NULL_CHECK] ../src/parser/parser.cpp:90 - Potential missing null check
  [NULL_CHECK] ../src/parser/parser.cpp:102 - Potential missing null check
  [TODO] ../src/parser/parser.cpp:313 - Unimplemented code section
  [TODO] ../src/parser/parser.cpp:332 - Unimplemented code section
  [TODO] ../src/parser/parser.cpp:334 - Unimplemented code section
  [DUPLICATION] ../src/parser/parser.cpp:993 - IF NOT EXISTS pattern - consider helper function
  [DUPLICATION] ../src/parser/parser.cpp:1056 - IF NOT EXISTS pattern - consider helper function
  [DUPLICATION] ../src/parser/parser.cpp:1177 - IF NOT EXISTS pattern - consider helper function
  [STRING_COMPARE] ../src/parser/parser.cpp:2499 - String comparison without TODO marker
  [STRING_COMPARE] ../src/parser/parser.cpp:2573 - String comparison without TODO marker
  [STRING_COMPARE] ../src/parser/parser_statements.cpp:28 - String comparison without TODO marker

=== PARSER FUNCTIONALITY TEST ===
✅ SELECT * FROM users...
✅ CREATE TABLE test (id INT)...
✅ INSERT INTO test VALUES (1)...
✅ WITH cte AS (SELECT 1) SELECT * FROM cte...
✅ SELECT ROW_NUMBER() OVER (ORDER BY id) F...

Functionality: 5/5 queries parsed successfully

⚠️  WARNING: Critical violations found!
Please review and fix string comparisons and null checks.
<end of output>
Test time =   0.03 sec
----------------------------------------------------------
Test Passed.
"test_parser_violations" end time: Aug 30 12:39 PDT
"test_parser_violations" time elapsed: 00:00:00
----------------------------------------------------------

25/28 Testing: test_parser_validation
25/28 Test: test_parser_validation
Command: "/Users/chiradip/codes/DB25-parser2/build/test_parser_validation"
Directory: /Users/chiradip/codes/DB25-parser2/build
"test_parser_validation" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------

=== DB25 PARSER COMPREHENSIVE VALIDATION ===
==================================================

📋 Core SQL:
  ✅ Basic SELECT============================
  ✅ DISTINCT================================
  ✅ WHERE clause============================
  ✅ ORDER BY================================
  ✅ LIMIT/OFFSET============================
  ✅ JOIN====================================
  ✅ LEFT JOIN===============================
  ✅ GROUP BY================================
  ✅ HAVING==================================
  ✅ Subquery================================
  Category Score: 10/10 (100.0%)

📋 Advanced SQL:
  ✅ Common Table Expression=================
  ✅ Recursive CTE===========================
  ✅ Window Function=========================
  ✅ Window Frame============================
  ✅ CASE expression=========================
  ✅ CAST expression=========================
  ✅ EXISTS==================================
  ✅ IN subquery=============================
  ✅ BETWEEN=================================
  ✅ LIKE====================================
  Category Score: 10/10 (100.0%)

📋 DDL:
  ✅ CREATE TABLE============================
  ✅ Foreign Key=============================
  ✅ CREATE INDEX============================
  ✅ UNIQUE INDEX============================
  ✅ CREATE VIEW=============================
  ✅ ALTER TABLE ADD=========================
  ✅ ALTER TABLE DROP========================
  ✅ ALTER TABLE RENAME======================
  ✅ DROP TABLE==============================
  ✅ DROP INDEX==============================
  Category Score: 10/10 (100.0%)

📋 DML:
  ✅ INSERT VALUES===========================
  ✅ INSERT with columns=====================
  ✅ INSERT SELECT===========================
  ✅ INSERT ON CONFLICT======================
  ✅ UPDATE==================================
  ✅ UPDATE WHERE============================
  ✅ UPDATE RETURNING========================
  ✅ DELETE all==============================
  ✅ DELETE WHERE============================
  ✅ DELETE USING============================
  Category Score: 10/10 (100.0%)

📋 Transactions:
  ✅ BEGIN===================================
  ✅ BEGIN TRANSACTION=======================
  ✅ COMMIT==================================
  ✅ ROLLBACK================================
  ✅ SAVEPOINT===============================
  ✅ RELEASE SAVEPOINT=======================
  ✅ ROLLBACK TO=============================
  Category Score: 7/7 (100.0%)

📋 Advanced Types - DDL:
  ✅ JSON type===============================
  ✅ JSONB type==============================
  ✅ Array type==============================
  ✅ Integer array===========================
  ✅ Multi-dim array=========================
  ✅ INTERVAL type=========================== [INTERVAL recognized]
  ✅ INTERVAL array========================== [INTERVAL recognized]
  Category Score: 7/7 (100.0%)

📋 Advanced Types - Expressions:
  ✅ INTERVAL literal======================== [INTERVAL recognized]
  ✅ JSON -> operator========================
  ✅ JSON ->> operator=======================
  ✅ ARRAY constructor======================= [Array recognized]
  ✅ ROW constructor=========================
  ✅ CAST to INTERVAL======================== [INTERVAL recognized]
  ❌ ANY with ARRAY==========================
  Category Score: 6/7 (85.7%)

📋 OLAP:
  ✅ GROUPING SETS===========================
  ✅ CUBE====================================
  ✅ ROLLUP==================================
  ✅ RANK====================================
  ✅ DENSE_RANK==============================
  ✅ LEAD====================================
  ✅ LAG=====================================
  Category Score: 7/7 (100.0%)

📋 Set Operations:
  ✅ UNION===================================
  ✅ UNION ALL===============================
  ✅ INTERSECT===============================
  ✅ EXCEPT==================================
  ❌ UNION with ORDER BY=====================
  Category Score: 4/5 (80.0%)

📋 Utility:
  ✅ EXPLAIN=================================
  ✅ VACUUM==================================
  ✅ VACUUM FULL=============================
  ✅ ANALYZE=================================
  ✅ REINDEX=================================
  ✅ TRUNCATE================================
  ✅ VALUES==================================
  ✅ SET=====================================
  ✅ PRAGMA==================================
  Category Score: 9/9 (100.0%)

==================================================
OVERALL VALIDATION SUMMARY
==================================================

📊 Results by Category:
Core SQL====================10/=10 (100.0%)
Advanced SQL================10/=10 (100.0%)
DDL=========================10/=10 (100.0%)
DML=========================10/=10 (100.0%)
Transactions=================7/==7 (100.0%)
Advanced Types - DDL=========7/==7 (100.0%)
Advanced Types - Expressions====6/==7 (=85.7%)
OLAP=========================7/==7 (100.0%)
Set Operations===============4/==5 (=80.0%)
Utility======================9/==9 (100.0%)

📈 Overall Score: 80/82 (97%)
⏱️  Test Duration: 0ms

🎯 Assessment:
  ✅ EXCELLENT - Parser is production-ready!
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"test_parser_validation" end time: Aug 30 12:39 PDT
"test_parser_validation" time elapsed: 00:00:00
----------------------------------------------------------

26/28 Testing: ArenaBasicTest
26/28 Test: ArenaBasicTest
Command: "/Users/chiradip/codes/DB25-parser2/build/tests/arena/test_arena_basic"
Directory: /Users/chiradip/codes/DB25-parser2/build/tests/arena
"ArenaBasicTest" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
[==========] Running 26 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 26 tests from ArenaBasicTest
[ RUN      ] ArenaBasicTest.DefaultConstruction
[       OK ] ArenaBasicTest.DefaultConstruction (0 ms)
[ RUN      ] ArenaBasicTest.SingleAllocation
[       OK ] ArenaBasicTest.SingleAllocation (0 ms)
[ RUN      ] ArenaBasicTest.ZeroSizeAllocation
[       OK ] ArenaBasicTest.ZeroSizeAllocation (0 ms)
[ RUN      ] ArenaBasicTest.MultipleSmallAllocations
[       OK ] ArenaBasicTest.MultipleSmallAllocations (0 ms)
[ RUN      ] ArenaBasicTest.LargeAllocation
[       OK ] ArenaBasicTest.LargeAllocation (0 ms)
[ RUN      ] ArenaBasicTest.VeryLargeAllocation
[       OK ] ArenaBasicTest.VeryLargeAllocation (0 ms)
[ RUN      ] ArenaBasicTest.DefaultAlignment
[       OK ] ArenaBasicTest.DefaultAlignment (0 ms)
[ RUN      ] ArenaBasicTest.CustomAlignment8
[       OK ] ArenaBasicTest.CustomAlignment8 (0 ms)
[ RUN      ] ArenaBasicTest.CustomAlignment16
[       OK ] ArenaBasicTest.CustomAlignment16 (0 ms)
[ RUN      ] ArenaBasicTest.CustomAlignment32
[       OK ] ArenaBasicTest.CustomAlignment32 (0 ms)
[ RUN      ] ArenaBasicTest.CustomAlignment64
[       OK ] ArenaBasicTest.CustomAlignment64 (0 ms)
[ RUN      ] ArenaBasicTest.MixedAlignments
[       OK ] ArenaBasicTest.MixedAlignments (0 ms)
[ RUN      ] ArenaBasicTest.NonPowerOfTwoAlignment
[       OK ] ArenaBasicTest.NonPowerOfTwoAlignment (0 ms)
[ RUN      ] ArenaBasicTest.WriteAndReadBack
[       OK ] ArenaBasicTest.WriteAndReadBack (0 ms)
[ RUN      ] ArenaBasicTest.MultipleTypesAllocation
[       OK ] ArenaBasicTest.MultipleTypesAllocation (0 ms)
[ RUN      ] ArenaBasicTest.ResetMaintainsMemory
[       OK ] ArenaBasicTest.ResetMaintainsMemory (0 ms)
[ RUN      ] ArenaBasicTest.ReuseAfterReset
[       OK ] ArenaBasicTest.ReuseAfterReset (0 ms)
[ RUN      ] ArenaBasicTest.ClearReleasesMemory
[       OK ] ArenaBasicTest.ClearReleasesMemory (0 ms)
[ RUN      ] ArenaBasicTest.AllocationAfterClear
[       OK ] ArenaBasicTest.AllocationAfterClear (0 ms)
[ RUN      ] ArenaBasicTest.BlockGrowth
[       OK ] ArenaBasicTest.BlockGrowth (0 ms)
[ RUN      ] ArenaBasicTest.UtilizationCalculation
[       OK ] ArenaBasicTest.UtilizationCalculation (0 ms)
[ RUN      ] ArenaBasicTest.BlockCount
[       OK ] ArenaBasicTest.BlockCount (0 ms)
[ RUN      ] ArenaBasicTest.MoveConstructor
[       OK ] ArenaBasicTest.MoveConstructor (0 ms)
[ RUN      ] ArenaBasicTest.MoveAssignment
[       OK ] ArenaBasicTest.MoveAssignment (0 ms)
[ RUN      ] ArenaBasicTest.ThreadLocalArena
[       OK ] ArenaBasicTest.ThreadLocalArena (0 ms)
[ RUN      ] ArenaBasicTest.ThreadLocalArenaDifferentThreads
[       OK ] ArenaBasicTest.ThreadLocalArenaDifferentThreads (0 ms)
[----------] 26 tests from ArenaBasicTest (0 ms total)

[----------] Global test environment tear-down
[==========] 26 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 26 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ArenaBasicTest" end time: Aug 30 12:39 PDT
"ArenaBasicTest" time elapsed: 00:00:00
----------------------------------------------------------

27/28 Testing: ArenaStressTest
27/28 Test: ArenaStressTest
Command: "/Users/chiradip/codes/DB25-parser2/build/tests/arena/test_arena_stress"
Directory: /Users/chiradip/codes/DB25-parser2/build/tests/arena
"ArenaStressTest" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
[==========] Running 13 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 13 tests from ArenaStressTest
[ RUN      ] ArenaStressTest.AllocationSpeed
Allocation performance:
  Time per allocation: 2.67542 ns
  Allocations per second: 3.73773e+08
  Total allocated: 7274496 bytes
  Utilization: 87.9786%
[       OK ] ArenaStressTest.AllocationSpeed (0 ms)
[ RUN      ] ArenaStressTest.MixedSizeAllocationSpeed
Mixed size allocation: 5.50167 ns per allocation
[       OK ] ArenaStressTest.MixedSizeAllocationSpeed (0 ms)
[ RUN      ] ArenaStressTest.FragmentationTest
Fragmentation test:
  Requested: 5166507 bytes
  Allocated: 6225920 bytes
  Overhead: 20.5054%
[       OK ] ArenaStressTest.FragmentationTest (0 ms)
[ RUN      ] ArenaStressTest.AlignmentOverhead
Alignment overhead for small objects with 64-byte alignment:
  Overhead: 1499.65%
[       OK ] ArenaStressTest.AlignmentOverhead (0 ms)
[ RUN      ] ArenaStressTest.MaximumAllocation
[       OK ] ArenaStressTest.MaximumAllocation (9 ms)
[ RUN      ] ArenaStressTest.ManySmallAllocations
1 million small allocations took: 2 ms
[       OK ] ArenaStressTest.ManySmallAllocations (2 ms)
[ RUN      ] ArenaStressTest.ResetPerformance
Reset time: 0 μs
[       OK ] ArenaStressTest.ResetPerformance (0 ms)
[ RUN      ] ArenaStressTest.ASTSimulationPattern
AST simulation (10K nodes):
  Time: 88 μs
  Per node: 0.0088 μs
  Memory used: 640000 bytes
  Memory efficiency: 65.1042%
[       OK ] ArenaStressTest.ASTSimulationPattern (0 ms)
[ RUN      ] ArenaStressTest.ThreadLocalArenaStress
Thread-local arena (8 threads):
  Total time: 2 ms
  Throughput: 4e+07 allocations/sec
[       OK ] ArenaStressTest.ThreadLocalArenaStress (2 ms)
[ RUN      ] ArenaStressTest.AlternatingLargeSmall
[       OK ] ArenaStressTest.AlternatingLargeSmall (0 ms)
[ RUN      ] ArenaStressTest.PowerOfTwoSizes
[       OK ] ArenaStressTest.PowerOfTwoSizes (0 ms)
[ RUN      ] ArenaStressTest.RandomAccessPattern
[       OK ] ArenaStressTest.RandomAccessPattern (0 ms)
[ RUN      ] ArenaStressTest.HighUtilization
Utilization with perfect 64-byte allocations: 99.9023%
[       OK ] ArenaStressTest.HighUtilization (0 ms)
[----------] 13 tests from ArenaStressTest (16 ms total)

[----------] Global test environment tear-down
[==========] 13 tests from 1 test suite ran. (16 ms total)
[  PASSED  ] 13 tests.
<end of output>
Test time =   0.02 sec
----------------------------------------------------------
Test Passed.
"ArenaStressTest" end time: Aug 30 12:39 PDT
"ArenaStressTest" time elapsed: 00:00:00
----------------------------------------------------------

28/28 Testing: ArenaEdgeTest
28/28 Test: ArenaEdgeTest
Command: "/Users/chiradip/codes/DB25-parser2/build/tests/arena/test_arena_edge"
Directory: /Users/chiradip/codes/DB25-parser2/build/tests/arena
"ArenaEdgeTest" start time: Aug 30 12:39 PDT
Output:
----------------------------------------------------------
[==========] Running 28 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 28 tests from ArenaEdgeTest
[ RUN      ] ArenaEdgeTest.ZeroByteAllocation
[       OK ] ArenaEdgeTest.ZeroByteAllocation (0 ms)
[ RUN      ] ArenaEdgeTest.OneByteAllocation
[       OK ] ArenaEdgeTest.OneByteAllocation (0 ms)
[ RUN      ] ArenaEdgeTest.MaxAlignment
[       OK ] ArenaEdgeTest.MaxAlignment (0 ms)
[ RUN      ] ArenaEdgeTest.MinAlignment
[       OK ] ArenaEdgeTest.MinAlignment (0 ms)
[ RUN      ] ArenaEdgeTest.UnalignedSize
[       OK ] ArenaEdgeTest.UnalignedSize (0 ms)
[ RUN      ] ArenaEdgeTest.SingleLargeAllocation
[       OK ] ArenaEdgeTest.SingleLargeAllocation (0 ms)
[ RUN      ] ArenaEdgeTest.ExactBlockSize
[       OK ] ArenaEdgeTest.ExactBlockSize (0 ms)
[ RUN      ] ArenaEdgeTest.JustUnderBlockSize
[       OK ] ArenaEdgeTest.JustUnderBlockSize (0 ms)
[ RUN      ] ArenaEdgeTest.JustOverBlockSize
[       OK ] ArenaEdgeTest.JustOverBlockSize (0 ms)
[ RUN      ] ArenaEdgeTest.MoveEmptyArena
[       OK ] ArenaEdgeTest.MoveEmptyArena (0 ms)
[ RUN      ] ArenaEdgeTest.SelfMoveAssignment
[       OK ] ArenaEdgeTest.SelfMoveAssignment (0 ms)
[ RUN      ] ArenaEdgeTest.MoveAfterReset
[       OK ] ArenaEdgeTest.MoveAfterReset (0 ms)
[ RUN      ] ArenaEdgeTest.MoveAfterClear
[       OK ] ArenaEdgeTest.MoveAfterClear (0 ms)
[ RUN      ] ArenaEdgeTest.ResetEmptyArena
[       OK ] ArenaEdgeTest.ResetEmptyArena (0 ms)
[ RUN      ] ArenaEdgeTest.ClearEmptyArena
[       OK ] ArenaEdgeTest.ClearEmptyArena (0 ms)
[ RUN      ] ArenaEdgeTest.MultipleResets
[       OK ] ArenaEdgeTest.MultipleResets (0 ms)
[ RUN      ] ArenaEdgeTest.AlternatingResetAllocate
[       OK ] ArenaEdgeTest.AlternatingResetAllocate (0 ms)
[ RUN      ] ArenaEdgeTest.ConstructWithoutAllocation
[       OK ] ArenaEdgeTest.ConstructWithoutAllocation (0 ms)
[ RUN      ] ArenaEdgeTest.ConstructComplexType
[       OK ] ArenaEdgeTest.ConstructComplexType (0 ms)
[ RUN      ] ArenaEdgeTest.ConstructLargeObject
[       OK ] ArenaEdgeTest.ConstructLargeObject (0 ms)
[ RUN      ] ArenaEdgeTest.PointerUniqueness
[       OK ] ArenaEdgeTest.PointerUniqueness (0 ms)
[ RUN      ] ArenaEdgeTest.PointerStabilityAfterGrowth
[       OK ] ArenaEdgeTest.PointerStabilityAfterGrowth (0 ms)
[ RUN      ] ArenaEdgeTest.WritePastAllocation
[       OK ] ArenaEdgeTest.WritePastAllocation (0 ms)
[ RUN      ] ArenaEdgeTest.StatisticsOverflow
[       OK ] ArenaEdgeTest.StatisticsOverflow (0 ms)
[ RUN      ] ArenaEdgeTest.BlockCountAccuracy
[       OK ] ArenaEdgeTest.BlockCountAccuracy (0 ms)
[ RUN      ] ArenaEdgeTest.InvalidAlignment
[       OK ] ArenaEdgeTest.InvalidAlignment (0 ms)
[ RUN      ] ArenaEdgeTest.ZeroAlignment
[       OK ] ArenaEdgeTest.ZeroAlignment (0 ms)
[ RUN      ] ArenaEdgeTest.OverAligned
[       OK ] ArenaEdgeTest.OverAligned (0 ms)
[----------] 28 tests from ArenaEdgeTest (0 ms total)

[----------] Global test environment tear-down
[==========] 28 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 28 tests.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ArenaEdgeTest" end time: Aug 30 12:39 PDT
"ArenaEdgeTest" time elapsed: 00:00:00
----------------------------------------------------------

End testing: Aug 30 12:39 PDT
